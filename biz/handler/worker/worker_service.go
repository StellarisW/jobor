// Code generated by hertz generator.

package worker

import (
	"context"
	"jobor/biz/dal/db"
	"jobor/biz/model"
	"jobor/biz/response"
	"jobor/kitex_gen/worker"

	"github.com/cloudwego/hertz/pkg/app"
)

// GetWorkerAll .
//
//	@Summary		jobor worker all get summary
//	@Description	jobor worker all get
//	@Tags			jobor worker
//	@router			/api/v1/jobor/workers [GET]
func GetWorkerAll(ctx context.Context, c *app.RequestContext) {
	var err error
	var req worker.WorkerQuery
	err = c.BindAndValidate(&req)
	if err != nil {
		response.ParamFailed(ctx, c, err)
		//response.SendBaseResp(ctx, c, err)
		return
	}
	var objs []worker.WorkerAllResp
	resp := response.PageDataList{List: &objs}
	if resp.Total, err = model.DataWithScopes(db.DB.Model(&model.JoborWorker{}), model.NameWorker, model.Scan,
		resp.List, model.GetScopesList()); err != nil {
		response.SendBaseResp(ctx, c, err)
		return
	}
	response.SendDataResp(ctx, c, response.Succeed, resp)
}

// GetWorkerById .
//
//	@Summary		jobor worker get by id summary
//	@Description	jobor worker get by id
//	@Tags			jobor worker
//
//	@router			/api/v1/jobor/worker/{id} [GET]
func GetWorkerById(ctx context.Context, c *app.RequestContext) {
	var err error
	_id := c.Params.ByName("id")

	hostResp, err := model.GetWorkerInfoById(_id, false)
	if err != nil {
		response.SendBaseResp(ctx, c, err)
		return
	}

	response.SendDataResp(ctx, c, response.Succeed, hostResp)
}

// GetWorker .
//
//	@Summary		jobor worker get summary
//	@Description	jobor worker get
//	@Tags			jobor worker
//	@Param			name		query	string	false	"name"
//	@Param			page		query	int		false	"page"
//	@Param			pageSize	query	int		false	"pageSize"
//	@router			/api/v1/jobor/worker [GET]
func GetWorker(ctx context.Context, c *app.RequestContext) {
	var err error
	var req worker.WorkerQuery
	err = c.BindAndValidate(&req)
	if err = c.BindAndValidate(&req); err != nil {
		response.ParamFailed(ctx, c, err)
		return
	}

	var objs model.Workers

	resp := response.InitPageData(ctx, c, &objs, false)

	if _, err = objs.List(&req, &resp); err != nil {
		response.SendBaseResp(ctx, c, err)
		return
	}
	response.SendDataResp(ctx, c, response.Succeed, resp)
}

// PostWorker .
//
//	@Summary		jobor worker post summary
//	@Description	jobor worker post
//	@Tags			jobor worker
//	@Param			json	body	worker.PostWorkerReq	true	"参数"
//	@router			/api/v1/jobor/worker [POST]
func PostWorker(ctx context.Context, c *app.RequestContext) {
	var err error
	var req worker.PostWorkerReq
	if err = c.BindAndValidate(&req); err != nil {
		response.ParamFailed(ctx, c, err)
		return
	}
	obj, err := model.AddWorker(ctx, db.DB, &req)
	if err != nil {
		response.SendBaseResp(ctx, c, err)
		return
	}

	response.SendDataResp(ctx, c, response.Succeed, obj)
}

// PutWorker .
//
//	@Summary		jobor worker put summary
//	@Description	jobor worker put
//	@Tags			jobor worker
//	@Param			id		path	int				true	"int valid"
//	@Param			json	body	worker.PutWorkerReq	true	"参数"
//	@router			/api/v1/jobor/worker/{id} [PUT]
func PutWorker(ctx context.Context, c *app.RequestContext) {
	var err error
	var req worker.PutWorkerReq
	err = c.BindAndValidate(&req)
	if err != nil {
		response.ParamFailed(ctx, c, err)
		return
	}

	_id := c.Params.ByName("id")
	//u, _ := worker.GetUserValue(c, false)
	//req.Updater = &u.Nickname
	obj, err := model.ModWorker(ctx, db.DB, _id, &req)
	if err != nil {
		response.SendBaseResp(ctx, c, err)
		return
	}

	response.SendDataResp(ctx, c, response.Succeed, obj)
}

// DeleteWorker .
//
//	@Summary		jobor worker delete summary
//	@Description	jobor worker delete
//	@Tags			jobor worker
//	@Param			id	path	int	true	"int valid"
//	@router			/api/v1/jobor/worker/{id} [DELETE]
func DeleteWorker(ctx context.Context, c *app.RequestContext) {
	var err error
	var req worker.WorkerQuery
	if err = c.BindAndValidate(&req); err != nil {
		response.ParamFailed(ctx, c, err)
		return
	}
	_id := c.Params.ByName("id")
	if objs, err := model.DelWorker(ctx, db.DB, []interface{}{_id}); err != nil {
		response.SendBaseResp(ctx, c, err)
		return
	} else {
		response.SendDataResp(ctx, c, response.Succeed, objs)
	}
}
