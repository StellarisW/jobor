// Code generated by hertz generator.

package sys_api

import (
	"context"
	"jobor/biz/dal"
	"jobor/biz/dal/db"
	"jobor/biz/model"
	"jobor/biz/response"

	"github.com/cloudwego/hertz/pkg/app"
	sys_api "jobor/kitex_gen/sys_api"
)

// TriggerUpdateApi .
//
//	@Summary		api trigger update summary
//	@Description	api trigger update
//	@Tags			api
//	@router			/api/v1/jobor/api-auto-update [GET]
func TriggerUpdateApi(ctx context.Context, c *app.RequestContext) {
	model.UpdateApiByRoutes(db.DB, dal.H)
	response.SendDataResp(ctx, c, response.Succeed, "")
}

// GetApiAll .
//
//	@Summary		api all get summary
//	@Description	api all get
//	@Tags			api
//	@router			/api/v1/jobor/apis [GET]
func GetApiAll(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys_api.ApiQuery
	if err = c.BindAndValidate(&req); err != nil {
		response.ParamFailed(ctx, c, err)
		return
	}
	var objs []model.Api
	resp := response.PageDataList{List: &objs}
	if resp.Total, err = model.DataWithScopes(db.DB, model.NameApi, model.Find, resp.List, model.GetScopesList(), model.OrderScopesApi()); err != nil {
		response.SendBaseResp(ctx, c, err)
		return
	}
	//resp.List = objs
	response.SendDataResp(ctx, c, response.Succeed, resp)
}

// GetApi .
//
//	@Summary		api get summary
//	@Description	api get
//	@Tags			api
//	@Param			name		query	string	false	"name"
//	@Param			title		query	string	false	"title"
//	@Param			dom			query	string	false	"dom"
//	@Param			path		query	string	false	"path"
//	@Param			method		query	string	false	"method"
//	@Param			enumstring	query	string	false	"string enums"	Enums(A, B, C)
//	@Param			enumint		query	int		false	"int enums"		Enums(1, 2, 3)
//	@Param			enumnumber	query	number	false	"int enums"		Enums(1.1, 1.2, 1.3)
//	@Param			string		query	string	false	"string valid"	minlength(5)	maxlength(10)
//	@Param			int			query	int		false	"int valid"		minimum(1)		maximum(10)
//	@router			/api/v1/jobor/api [GET]
func GetApi(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys_api.ApiQuery
	if err = c.BindAndValidate(&req); err != nil {
		response.ParamFailed(ctx, c, err)
		return
	}
	var objs model.Apis

	resp := response.InitPageData(ctx, c, &objs, false)

	if _, err = objs.List(&req, &resp); err != nil {
		response.SendBaseResp(ctx, c, err)
		return
	}
	response.SendDataResp(ctx, c, response.Succeed, resp)
}

// PostApi .
//
//	@Summary		api post summary
//	@Description	api post
//	@Tags			api
//	@Param			json	body	sys_api.ApiPost	true	"参数"
//	@router			/api/v1/jobor/api [POST]
func PostApi(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys_api.ApiPost
	if err = c.BindAndValidate(&req); err != nil {
		response.ParamFailed(ctx, c, err)
		return
	}
	obj, err := model.AddApi(ctx, db.DB, &req)
	if err != nil {
		response.SendBaseResp(ctx, c, err)
		return
	}

	response.SendDataResp(ctx, c, response.Succeed, obj)
}

// PutApi .
//
//	@Summary		api put summary
//	@Description	api put
//	@Tags			api
//	@Param			id		path	int				true	"int valid"
//	@Param			json	body	sys_api.ApiPut	true	"参数"
//	@router			/api/v1/jobor/api/{id} [PUT]
func PutApi(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys_api.ApiPut
	if err = c.BindAndValidate(&req); err != nil {
		response.ParamFailed(ctx, c, err)
		return
	}
	_id := c.Params.ByName("id")
	obj, err := model.ModApi(ctx, db.DB, _id, &req)
	if err != nil {
		response.SendBaseResp(ctx, c, err)
		return
	}

	response.SendDataResp(ctx, c, response.Succeed, obj)
}

// DeleteApi .
//
//	@Summary		api delete summary
//	@Description	api delete
//	@Tags			api
//	@Param			id		path	int				true	"int valid"
//	@Param			json	body	sys_api.ApiDel	true	"参数"
//	@router			/api/v1/jobor/api/{id} [DELETE]
func DeleteApi(ctx context.Context, c *app.RequestContext) {
	var err error
	var req sys_api.ApiDel
	if err = c.BindAndValidate(&req); err != nil {
		response.ParamFailed(ctx, c, err)
		return
	}
	_id := c.Params.ByName("id")
	if objs, err := model.DelApi(ctx, db.DB, []interface{}{_id}); err != nil {
		response.SendBaseResp(ctx, c, err)
		return
	} else {
		response.SendDataResp(ctx, c, response.Succeed, objs)
	}

}
