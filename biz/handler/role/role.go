// Code generated by hertz generator.

package role

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	role "jobor/kitex_gen/role"
)

// GetRoleAll .
// @router /api/v1/sys/roles [GET]
func GetRoleAll(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.RoleQuery
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(role.RoleResp)

	c.JSON(consts.StatusOK, resp)
}

// GetRoleTree .
// @router /api/v1/sys/role-tree [GET]
func GetRoleTree(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.RoleQuery
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(role.RoleResp)

	c.JSON(consts.StatusOK, resp)
}

// GetRole .
// @router /api/v1/sys/role [GET]
func GetRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.RoleQuery
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(role.RoleResp)

	c.JSON(consts.StatusOK, resp)
}

// PostRole .
// @router /api/v1/sys/role [POST]
func PostRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.RolePost
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(role.RoleResp)

	c.JSON(consts.StatusOK, resp)
}

// PutRole .
// @router /api/v1/sys/role/:id [PUT]
func PutRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.RolePut
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(role.RoleResp)

	c.JSON(consts.StatusOK, resp)
}

// DeleteRole .
// @router /api/v1/sys/role/:id [DELETE]
func DeleteRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.RoleDel
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(role.RoleResp)

	c.JSON(consts.StatusOK, resp)
}
