// Code generated by hertz generator.

package role

import (
	"context"
	"jobor/biz/dal/db"
	"jobor/biz/model"
	"jobor/biz/response"

	"github.com/cloudwego/hertz/pkg/app"
	role "jobor/kitex_gen/role"
)

// GetRoleAll .
//
//	@Summary		role all get summary
//	@Description	role all get
//	@Tags			role
//	@router			/api/v1/jobor/roles [GET]
func GetRoleAll(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.RoleQuery
	err = c.BindAndValidate(&req)
	if err != nil {
		response.ParamFailed(ctx, c, err)
		return
	}
	var objs []role.RoleAll
	resp := response.PageDataList{List: &objs}
	if resp.Total, err = model.DataWithScopes(db.DB, model.NameRole, model.Scan, resp.List, model.GetScopesList(),
		model.OrderScopesRole()); err != nil {
		response.SendBaseResp(ctx, c, err)
		return
	}
	response.SendDataResp(ctx, c, response.Succeed, resp)
}

// GetRoleById .
//
//	@Summary		role get by id summary
//	@Description	role get by id
//	@Tags			role
//
//	@router			/api/v1/jobor/role/{id} [GET]
func GetRoleById(ctx context.Context, c *app.RequestContext) {
	var err error
	_id := c.Params.ByName("id")

	hostResp, err := model.GetRoleInfoById(_id, false)
	if err != nil {
		response.SendBaseResp(ctx, c, err)
		return
	}

	response.SendDataResp(ctx, c, response.Succeed, hostResp)
}

// GetRole .
//
//	@Summary		role get summary
//	@Description	role get
//	@Tags			role
//	@Param			name		query	string	false	"name"
//	@Param			page		query	int		false	"page"
//	@Param			pageSize	query	int		false	"pageSize"
//	@router			/api/v1/jobor/role [GET]
func GetRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.RoleQuery
	err = c.BindAndValidate(&req)
	if err = c.BindAndValidate(&req); err != nil {
		response.ParamFailed(ctx, c, err)
		return
	}

	var objs model.Roles

	resp := response.InitPageData(ctx, c, &objs, false)

	if _, err = objs.List(&req, &resp); err != nil {
		response.SendBaseResp(ctx, c, err)
		return
	}
	response.SendDataResp(ctx, c, response.Succeed, resp)
}

// PostRole .
//
//	@Summary		role post summary
//	@Description	role post
//	@Tags			role
//	@Param			json	body	role.RolePost	true	"参数"
//	@router			/api/v1/jobor/role [POST]
func PostRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.RolePost
	if err = c.BindAndValidate(&req); err != nil {
		response.ParamFailed(ctx, c, err)
		return
	}
	obj, err := model.AddRole(ctx, db.DB, &req)
	if err != nil {
		response.SendBaseResp(ctx, c, err)
		return
	}

	response.SendDataResp(ctx, c, response.Succeed, obj)
}

// PutRole .
//
//	@Summary		role put summary
//	@Description	role put
//	@Tags			role
//	@Param			id		path	int				true	"int valid"
//	@Param			json	body	role.RolePut	true	"参数"
//	@router			/api/v1/jobor/role/{id} [PUT]
func PutRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.RolePut
	err = c.BindAndValidate(&req)
	if err != nil {
		response.ParamFailed(ctx, c, err)
		return
	}

	_id := c.Params.ByName("id")
	//u, _ := role.GetUserValue(c, false)
	//req.Updater = &u.Nickname
	obj, err := model.ModRole(ctx, db.DB, _id, &req)
	if err != nil {
		response.SendBaseResp(ctx, c, err)
		return
	}

	response.SendDataResp(ctx, c, response.Succeed, obj)
}

// DeleteRole .
//
//	@Summary		role delete summary
//	@Description	role delete
//	@Tags			role
//	@Param			id	path	int	true	"int valid"
//	@router			/api/v1/jobor/role/{id} [DELETE]
func DeleteRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.RoleQuery
	if err = c.BindAndValidate(&req); err != nil {
		response.ParamFailed(ctx, c, err)
		return
	}
	_id := c.Params.ByName("id")
	if objs, err := model.DelRole(ctx, db.DB, []interface{}{_id}); err != nil {
		response.SendBaseResp(ctx, c, err)
		return
	} else {
		response.SendDataResp(ctx, c, response.Succeed, objs)
	}
}

// GetRoleTree .
//
//	@Summary		role get tree summary
//	@Description	role get tree
//	@Tags			role
//
//	@router			/api/v1/jobor/role-tree [GET]
func GetRoleTree(ctx context.Context, c *app.RequestContext) {
	var err error
	var req role.RoleQuery
	if err = c.BindAndValidate(&req); err != nil {
		response.ParamFailed(ctx, c, err)
		return
	}
	var api model.Role
	listTree, err := api.GetListTree(db.DB, true)
	if err != nil {
		response.SendBaseResp(ctx, c, err)
		return
	}
	if err != nil {
		response.SendBaseResp(ctx, c, err)
		return
	} else {
		pageData := response.PageDataList{List: listTree}
		response.SendDataResp(ctx, c, response.Succeed, pageData)
	}

}
