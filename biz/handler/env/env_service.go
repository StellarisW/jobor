// Code generated by hertz generator.

package env

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	env "jobor/kitex_gen/env"
)

// GetEnvAll .
// @router /api/v1/jobor/envs [GET]
func GetEnvAll(ctx context.Context, c *app.RequestContext) {
	var err error
	var req env.EnvQuery
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(env.EnvAllResp)

	c.JSON(consts.StatusOK, resp)
}

// GetEnvById .
// @router /api/v1/jobor/env/:id [GET]
func GetEnvById(ctx context.Context, c *app.RequestContext) {
	var err error
	var req env.EnvQuery
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(env.EnvResp)

	c.JSON(consts.StatusOK, resp)
}

// GetEnv .
// @router /api/v1/jobor/env [GET]
func GetEnv(ctx context.Context, c *app.RequestContext) {
	var err error
	var req env.EnvQuery
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(env.EnvResp)

	c.JSON(consts.StatusOK, resp)
}

// PostEnv .
// @router /api/v1/jobor/env [POST]
func PostEnv(ctx context.Context, c *app.RequestContext) {
	var err error
	var req env.PostEnvReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(env.EnvResp)

	c.JSON(consts.StatusOK, resp)
}

// PutEnv .
// @router /api/v1/jobor/env/:id [PUT]
func PutEnv(ctx context.Context, c *app.RequestContext) {
	var err error
	var req env.PutEnvReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(env.EnvResp)

	c.JSON(consts.StatusOK, resp)
}

// DeleteEnv .
// @router /api/v1/jobor/env/:id [DELETE]
func DeleteEnv(ctx context.Context, c *app.RequestContext) {
	var err error
	var req env.EnvQuery
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(env.EnvResp)

	c.JSON(consts.StatusOK, resp)
}
