// Code generated by hertz generator.

package user

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	base "jobor/kitex_gen/base"
	user "jobor/kitex_gen/user"
)

// SwitchUser .
// @router /api/v1/jobor/user-switch/:user_id [GET]
func SwitchUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserQuery
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.Empty)

	c.JSON(consts.StatusOK, resp)
}

// GetUserSelf .
// @router /api/v1/jobor/user-self [GET]
func GetUserSelf(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserQuery
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.Empty)

	c.JSON(consts.StatusOK, resp)
}

// SyncUser .
// @router /api/v1/sys/user-sync [GET]
func SyncUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserQuery
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.Empty)

	c.JSON(consts.StatusOK, resp)
}

// GetUserAll .
// @router /api/v1/sys/users [GET]
func GetUserAll(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserQuery
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.Empty)

	c.JSON(consts.StatusOK, resp)
}

// GetUser .
// @router /api/v1/sys/user [GET]
func GetUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserQuery
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.Empty)

	c.JSON(consts.StatusOK, resp)
}

// GetUserById .
// @router /api/v1/sys/user/:id [GET]
func GetUserById(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserQuery
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.Empty)

	c.JSON(consts.StatusOK, resp)
}

// PostUser .
// @router /api/v1/sys/user [POST]
func PostUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.PostUserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.Empty)

	c.JSON(consts.StatusOK, resp)
}

// PutUser .
// @router /api/v1/sys/user/:id [PUT]
func PutUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.PutUserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.Empty)

	c.JSON(consts.StatusOK, resp)
}

// DeleteUser .
// @router /api/v1/sys/user/:id [DELETE]
func DeleteUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserQuery
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.Empty)

	c.JSON(consts.StatusOK, resp)
}
