// idl/hello/hello.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v4.24.2
// source: task_log.proto

package task_log

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "jobor/kitex_gen/api"
	task "jobor/kitex_gen/task"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" query:"id" form:"id" json:"id"`
	Hostname    string `protobuf:"bytes,2,opt,name=hostname,proto3" query:"hostname" form:"hostname" json:"hostname"`
	Ip          string `protobuf:"bytes,3,opt,name=ip,proto3" query:"ip" form:"ip" json:"ip"`
	Addr        string `protobuf:"bytes,4,opt,name=addr,proto3" query:"addr" form:"addr" json:"addr"`
	Version     string `protobuf:"bytes,5,opt,name=version,proto3" query:"version" form:"version" json:"version"`
	RoutingKey  string `protobuf:"bytes,6,opt,name=routing_key,json=routingKey,proto3" query:"routing_key" form:"routing_key" json:"routing_key"`
	Weight      int32  `protobuf:"varint,7,opt,name=weight,proto3" form:"weight" json:"weight" query:"weight"`
	LeaseUpdate int64  `protobuf:"varint,8,opt,name=lease_update,json=leaseUpdate,proto3" query:"lease_update" form:"lease_update" json:"lease_update"`
	Status      string `protobuf:"bytes,9,opt,name=status,proto3" query:"status" form:"status" json:"status"`
	Page        uint64 `protobuf:"varint,111,opt,name=page,proto3" json:"page" form:"page" query:"page"`
	PageSize    uint64 `protobuf:"varint,112,opt,name=pageSize,proto3" json:"pageSize" form:"pageSize" query:"pageSize"`
}

func (x *LogQuery) Reset() {
	*x = LogQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogQuery) ProtoMessage() {}

func (x *LogQuery) ProtoReflect() protoreflect.Message {
	mi := &file_task_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogQuery.ProtoReflect.Descriptor instead.
func (*LogQuery) Descriptor() ([]byte, []int) {
	return file_task_log_proto_rawDescGZIP(), []int{0}
}

func (x *LogQuery) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LogQuery) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *LogQuery) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *LogQuery) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *LogQuery) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *LogQuery) GetRoutingKey() string {
	if x != nil {
		return x.RoutingKey
	}
	return ""
}

func (x *LogQuery) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *LogQuery) GetLeaseUpdate() int64 {
	if x != nil {
		return x.LeaseUpdate
	}
	return 0
}

func (x *LogQuery) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *LogQuery) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *LogQuery) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type LogResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64          `protobuf:"varint,1,opt,name=id,proto3" query:"id" form:"id" json:"id"`
	Name          string         `protobuf:"bytes,2,opt,name=name,proto3" query:"name" form:"name" json:"name"`
	Lang          string         `protobuf:"bytes,3,opt,name=lang,proto3" query:"lang" form:"lang" json:"lang"`
	TaskId        int64          `protobuf:"varint,4,opt,name=task_id,json=taskId,proto3" form:"task_id" json:"task_id" query:"task_id"`
	TriggerMethod string         `protobuf:"bytes,5,opt,name=trigger_method,json=triggerMethod,proto3" query:"trigger_method" form:"trigger_method" json:"trigger_method"`
	Expr          string         `protobuf:"bytes,6,opt,name=expr,proto3" query:"expr" form:"expr" json:"expr"`
	Data          *task.TaskData `protobuf:"bytes,7,opt,name=data,proto3" form:"data" json:"data" query:"data"`
	Resp          string         `protobuf:"bytes,8,opt,name=resp,proto3" query:"resp" form:"resp" json:"resp"`
	CostTime      float32        `protobuf:"fixed32,9,opt,name=cost_time,json=costTime,proto3" query:"cost_time" form:"cost_time" json:"cost_time"`
	Result        string         `protobuf:"bytes,10,opt,name=result,proto3" form:"result" json:"result" query:"result"`
	ErrCode       int32          `protobuf:"varint,11,opt,name=err_code,json=errCode,proto3" query:"err_code" form:"err_code" json:"err_code"`
	ErrMsg        string         `protobuf:"bytes,12,opt,name=err_msg,json=errMsg,proto3" query:"err_msg" form:"err_msg" json:"err_msg"`
	Addr          string         `protobuf:"bytes,13,opt,name=addr,proto3" query:"addr" form:"addr" json:"addr"`
	StartTime     string         `protobuf:"bytes,14,opt,name=start_time,json=startTime,proto3" query:"start_time" form:"start_time" json:"start_time"`
	EndTime       string         `protobuf:"bytes,15,opt,name=end_time,json=endTime,proto3" query:"end_time" form:"end_time" json:"end_time"`
	CreatedAt     string         `protobuf:"bytes,110,opt,name=created_at,json=createdAt,proto3" query:"created_at" form:"created_at" json:"created_at"`
	UpdatedAt     string         `protobuf:"bytes,120,opt,name=updated_at,json=updatedAt,proto3" query:"updated_at" form:"updated_at" json:"updated_at"`
}

func (x *LogResp) Reset() {
	*x = LogResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogResp) ProtoMessage() {}

func (x *LogResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogResp.ProtoReflect.Descriptor instead.
func (*LogResp) Descriptor() ([]byte, []int) {
	return file_task_log_proto_rawDescGZIP(), []int{1}
}

func (x *LogResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LogResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LogResp) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *LogResp) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *LogResp) GetTriggerMethod() string {
	if x != nil {
		return x.TriggerMethod
	}
	return ""
}

func (x *LogResp) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *LogResp) GetData() *task.TaskData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LogResp) GetResp() string {
	if x != nil {
		return x.Resp
	}
	return ""
}

func (x *LogResp) GetCostTime() float32 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

func (x *LogResp) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *LogResp) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *LogResp) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *LogResp) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *LogResp) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *LogResp) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *LogResp) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *LogResp) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type LogAllResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" form:"id" json:"id" query:"id"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" form:"name" json:"name" query:"name"`
}

func (x *LogAllResp) Reset() {
	*x = LogAllResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogAllResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogAllResp) ProtoMessage() {}

func (x *LogAllResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogAllResp.ProtoReflect.Descriptor instead.
func (*LogAllResp) Descriptor() ([]byte, []int) {
	return file_task_log_proto_rawDescGZIP(), []int{2}
}

func (x *LogAllResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LogAllResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type LogGetByIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id" query:"id"`
	Name          string         `protobuf:"bytes,2,opt,name=name,proto3" form:"name" json:"name" query:"name"`
	Lang          string         `protobuf:"bytes,3,opt,name=lang,proto3" query:"lang" form:"lang" json:"lang"`
	TaskId        int64          `protobuf:"varint,4,opt,name=task_id,json=taskId,proto3" query:"task_id" form:"task_id" json:"task_id"`
	TriggerMethod string         `protobuf:"bytes,5,opt,name=trigger_method,json=triggerMethod,proto3" query:"trigger_method" form:"trigger_method" json:"trigger_method"`
	Expr          string         `protobuf:"bytes,6,opt,name=expr,proto3" query:"expr" form:"expr" json:"expr"`
	Data          *task.TaskData `protobuf:"bytes,7,opt,name=data,proto3" form:"data" json:"data" query:"data"`
	Resp          string         `protobuf:"bytes,8,opt,name=resp,proto3" query:"resp" form:"resp" json:"resp"`
	CostTime      float32        `protobuf:"fixed32,9,opt,name=cost_time,json=costTime,proto3" form:"cost_time" json:"cost_time" query:"cost_time"`
	Result        string         `protobuf:"bytes,10,opt,name=result,proto3" form:"result" json:"result" query:"result"`
	ErrCode       int32          `protobuf:"varint,11,opt,name=err_code,json=errCode,proto3" query:"err_code" form:"err_code" json:"err_code"`
	ErrMsg        string         `protobuf:"bytes,12,opt,name=err_msg,json=errMsg,proto3" query:"err_msg" form:"err_msg" json:"err_msg"`
	Addr          string         `protobuf:"bytes,13,opt,name=addr,proto3" query:"addr" form:"addr" json:"addr"`
	StartTime     string         `protobuf:"bytes,14,opt,name=start_time,json=startTime,proto3" form:"start_time" json:"start_time" query:"start_time"`
	EndTime       string         `protobuf:"bytes,15,opt,name=end_time,json=endTime,proto3" form:"end_time" json:"end_time" query:"end_time"`
	CreatedAt     string         `protobuf:"bytes,110,opt,name=created_at,json=createdAt,proto3" query:"created_at" form:"created_at" json:"created_at"`
	UpdatedAt     string         `protobuf:"bytes,120,opt,name=updated_at,json=updatedAt,proto3" query:"updated_at" form:"updated_at" json:"updated_at"`
}

func (x *LogGetByIdResp) Reset() {
	*x = LogGetByIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_log_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogGetByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogGetByIdResp) ProtoMessage() {}

func (x *LogGetByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_log_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogGetByIdResp.ProtoReflect.Descriptor instead.
func (*LogGetByIdResp) Descriptor() ([]byte, []int) {
	return file_task_log_proto_rawDescGZIP(), []int{3}
}

func (x *LogGetByIdResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LogGetByIdResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LogGetByIdResp) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *LogGetByIdResp) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *LogGetByIdResp) GetTriggerMethod() string {
	if x != nil {
		return x.TriggerMethod
	}
	return ""
}

func (x *LogGetByIdResp) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *LogGetByIdResp) GetData() *task.TaskData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LogGetByIdResp) GetResp() string {
	if x != nil {
		return x.Resp
	}
	return ""
}

func (x *LogGetByIdResp) GetCostTime() float32 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

func (x *LogGetByIdResp) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *LogGetByIdResp) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *LogGetByIdResp) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *LogGetByIdResp) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *LogGetByIdResp) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *LogGetByIdResp) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *LogGetByIdResp) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *LogGetByIdResp) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type PostLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string         `protobuf:"bytes,2,opt,name=name,proto3" query:"name" form:"name" json:"name"`
	Lang          string         `protobuf:"bytes,3,opt,name=lang,proto3" query:"lang" form:"lang" json:"lang"`
	TaskId        int64          `protobuf:"varint,4,opt,name=task_id,json=taskId,proto3" form:"task_id" json:"task_id" query:"task_id"`
	TriggerMethod string         `protobuf:"bytes,5,opt,name=trigger_method,json=triggerMethod,proto3" query:"trigger_method" form:"trigger_method" json:"trigger_method"`
	Expr          string         `protobuf:"bytes,6,opt,name=expr,proto3" form:"expr" json:"expr" query:"expr"`
	Data          *task.TaskData `protobuf:"bytes,7,opt,name=data,proto3" query:"data" form:"data" json:"data"`
	Resp          string         `protobuf:"bytes,8,opt,name=resp,proto3" query:"resp" form:"resp" json:"resp"`
	CostTime      float32        `protobuf:"fixed32,9,opt,name=cost_time,json=costTime,proto3" query:"cost_time" form:"cost_time" json:"cost_time"`
	Result        string         `protobuf:"bytes,10,opt,name=result,proto3" query:"result" form:"result" json:"result"`
	ErrCode       int32          `protobuf:"varint,11,opt,name=err_code,json=errCode,proto3" query:"err_code" form:"err_code" json:"err_code"`
	ErrMsg        string         `protobuf:"bytes,12,opt,name=err_msg,json=errMsg,proto3" query:"err_msg" form:"err_msg" json:"err_msg"`
	Addr          string         `protobuf:"bytes,13,opt,name=addr,proto3" query:"addr" form:"addr" json:"addr"`
	StartTime     string         `protobuf:"bytes,14,opt,name=start_time,json=startTime,proto3" query:"start_time" form:"start_time" json:"start_time"`
	EndTime       string         `protobuf:"bytes,15,opt,name=end_time,json=endTime,proto3" form:"end_time" json:"end_time" query:"end_time"`
}

func (x *PostLogReq) Reset() {
	*x = PostLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_log_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostLogReq) ProtoMessage() {}

func (x *PostLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_log_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostLogReq.ProtoReflect.Descriptor instead.
func (*PostLogReq) Descriptor() ([]byte, []int) {
	return file_task_log_proto_rawDescGZIP(), []int{4}
}

func (x *PostLogReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PostLogReq) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *PostLogReq) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *PostLogReq) GetTriggerMethod() string {
	if x != nil {
		return x.TriggerMethod
	}
	return ""
}

func (x *PostLogReq) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *PostLogReq) GetData() *task.TaskData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PostLogReq) GetResp() string {
	if x != nil {
		return x.Resp
	}
	return ""
}

func (x *PostLogReq) GetCostTime() float32 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

func (x *PostLogReq) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *PostLogReq) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *PostLogReq) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *PostLogReq) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *PostLogReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *PostLogReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

type PutLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          *string        `protobuf:"bytes,2,opt,name=name,proto3,oneof" query:"name" form:"name,omitempty" json:"name,omitempty"`
	Lang          *string        `protobuf:"bytes,3,opt,name=lang,proto3,oneof" query:"lang" form:"lang,omitempty" json:"lang,omitempty"`
	TaskId        *int64         `protobuf:"varint,4,opt,name=task_id,json=taskId,proto3,oneof" query:"task_id" json:"task_id,omitempty"`
	TriggerMethod *string        `protobuf:"bytes,5,opt,name=trigger_method,json=triggerMethod,proto3,oneof" form:"trigger_method,omitempty" json:"trigger_method,omitempty" query:"trigger_method"`
	Expr          *string        `protobuf:"bytes,6,opt,name=expr,proto3,oneof" form:"expr,omitempty" json:"expr,omitempty" query:"expr"`
	Data          *task.TaskData `protobuf:"bytes,7,opt,name=data,proto3" form:"data,omitempty" json:"data,omitempty" query:"data"`
	Resp          *string        `protobuf:"bytes,8,opt,name=resp,proto3,oneof" form:"resp,omitempty" json:"resp,omitempty" query:"resp"`
	CostTime      *float32       `protobuf:"fixed32,9,opt,name=cost_time,json=costTime,proto3,oneof" query:"cost_time" json:"cost_time,omitempty"`
	Result        *string        `protobuf:"bytes,10,opt,name=result,proto3,oneof" form:"result,omitempty" json:"result,omitempty" query:"result"`
	ErrCode       *int32         `protobuf:"varint,11,opt,name=err_code,json=errCode,proto3,oneof" query:"err_code" json:"err_code,omitempty"`
	ErrMsg        *string        `protobuf:"bytes,12,opt,name=err_msg,json=errMsg,proto3,oneof" form:"err_msg,omitempty" json:"err_msg,omitempty" query:"err_msg"`
	Addr          *string        `protobuf:"bytes,13,opt,name=addr,proto3,oneof" form:"addr,omitempty" json:"addr,omitempty" query:"addr"`
	StartTime     *string        `protobuf:"bytes,14,opt,name=start_time,json=startTime,proto3,oneof" form:"start_time,omitempty" json:"start_time,omitempty" query:"start_time"`
	EndTime       *string        `protobuf:"bytes,15,opt,name=end_time,json=endTime,proto3,oneof" form:"end_time,omitempty" json:"end_time,omitempty" query:"end_time"`
}

func (x *PutLogReq) Reset() {
	*x = PutLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_log_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutLogReq) ProtoMessage() {}

func (x *PutLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_log_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutLogReq.ProtoReflect.Descriptor instead.
func (*PutLogReq) Descriptor() ([]byte, []int) {
	return file_task_log_proto_rawDescGZIP(), []int{5}
}

func (x *PutLogReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PutLogReq) GetLang() string {
	if x != nil && x.Lang != nil {
		return *x.Lang
	}
	return ""
}

func (x *PutLogReq) GetTaskId() int64 {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return 0
}

func (x *PutLogReq) GetTriggerMethod() string {
	if x != nil && x.TriggerMethod != nil {
		return *x.TriggerMethod
	}
	return ""
}

func (x *PutLogReq) GetExpr() string {
	if x != nil && x.Expr != nil {
		return *x.Expr
	}
	return ""
}

func (x *PutLogReq) GetData() *task.TaskData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PutLogReq) GetResp() string {
	if x != nil && x.Resp != nil {
		return *x.Resp
	}
	return ""
}

func (x *PutLogReq) GetCostTime() float32 {
	if x != nil && x.CostTime != nil {
		return *x.CostTime
	}
	return 0
}

func (x *PutLogReq) GetResult() string {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return ""
}

func (x *PutLogReq) GetErrCode() int32 {
	if x != nil && x.ErrCode != nil {
		return *x.ErrCode
	}
	return 0
}

func (x *PutLogReq) GetErrMsg() string {
	if x != nil && x.ErrMsg != nil {
		return *x.ErrMsg
	}
	return ""
}

func (x *PutLogReq) GetAddr() string {
	if x != nil && x.Addr != nil {
		return *x.Addr
	}
	return ""
}

func (x *PutLogReq) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *PutLogReq) GetEndTime() string {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return ""
}

var File_task_log_proto protoreflect.FileDescriptor

var file_task_log_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x6f, 0x67, 0x1a, 0x09, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xe6, 0x03, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1c,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0c, 0xb2, 0xbb, 0x18, 0x02,
	0x69, 0x64, 0xca, 0xbb, 0x18, 0x02, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0xb2, 0xbb, 0x18, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xb2, 0xbb, 0x18, 0x02, 0x69, 0x70, 0xca, 0xbb, 0x18, 0x02, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x24, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xb2, 0xbb, 0x18, 0x04, 0x61, 0x64, 0x64, 0x72, 0xca, 0xbb, 0x18, 0x04, 0x61, 0x64, 0x64, 0x72,
	0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xbb, 0x18, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0xca, 0xbb, 0x18, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xb2,
	0xbb, 0x18, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0xca, 0xbb,
	0x18, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x52, 0x0a, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0xb2, 0xbb, 0x18, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0xca, 0xbb, 0x18, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x20, 0xb2,
	0xbb, 0x18, 0x0c, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0xca,
	0xbb, 0x18, 0x0c, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xbb,
	0x18, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xca, 0xbb, 0x18, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x70, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xd2, 0x06, 0x0a, 0x07, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x0c, 0xb2, 0xbb, 0x18, 0x02, 0x69, 0x64, 0xca, 0xbb, 0x18, 0x02, 0x69, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0xca, 0xbb, 0x18, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x16, 0xb2, 0xbb, 0x18, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0xca, 0xbb,
	0x18, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x4b, 0x0a, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xb2, 0xbb, 0x18, 0x0e, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0xca, 0xbb, 0x18,
	0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x24,
	0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb,
	0x18, 0x04, 0x65, 0x78, 0x70, 0x72, 0xca, 0xbb, 0x18, 0x04, 0x65, 0x78, 0x70, 0x72, 0x52, 0x04,
	0x65, 0x78, 0x70, 0x72, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x64, 0x61, 0x74, 0x61, 0xca, 0xbb, 0x18, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x04, 0x72, 0x65,
	0x73, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x72, 0x65,
	0x73, 0x70, 0xca, 0xbb, 0x18, 0x04, 0x72, 0x65, 0x73, 0x70, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70,
	0x12, 0x37, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x02, 0x42, 0x1a, 0xb2, 0xbb, 0x18, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0xca, 0xbb, 0x18, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xbb, 0x18, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0xca, 0xbb, 0x18, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x18, 0xb2, 0xbb, 0x18, 0x08, 0x65,
	0x72, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0xca, 0xbb, 0x18, 0x08, 0x65, 0x72, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x07,
	0x65, 0x72, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2,
	0xbb, 0x18, 0x07, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0xca, 0xbb, 0x18, 0x07, 0x65, 0x72,
	0x72, 0x5f, 0x6d, 0x73, 0x67, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x24, 0x0a,
	0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18,
	0x04, 0x61, 0x64, 0x64, 0x72, 0xca, 0xbb, 0x18, 0x04, 0x61, 0x64, 0x64, 0x72, 0x52, 0x04, 0x61,
	0x64, 0x64, 0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xb2, 0xbb, 0x18, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0xb2, 0xbb, 0x18, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0xca, 0xbb, 0x18, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xb2, 0xbb, 0x18, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0xca, 0xbb, 0x18, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xb2, 0xbb, 0x18, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0xca, 0xbb, 0x18, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x50, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0c, 0xb2, 0xbb, 0x18, 0x02, 0x69,
	0x64, 0xca, 0xbb, 0x18, 0x02, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xd3, 0x06, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x06, 0xb2, 0xbb, 0x18, 0x02, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0xca, 0xbb, 0x18, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x16, 0xb2, 0xbb, 0x18, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0xca, 0xbb, 0x18, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0e, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0xb2, 0xbb, 0x18, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0xca, 0xbb, 0x18, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x65, 0x78, 0x70, 0x72, 0xca, 0xbb,
	0x18, 0x04, 0x65, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x34, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04,
	0x64, 0x61, 0x74, 0x61, 0xca, 0xbb, 0x18, 0x04, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x24, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x72, 0x65, 0x73, 0x70, 0xca, 0xbb, 0x18, 0x04, 0x72, 0x65,
	0x73, 0x70, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x42, 0x1a, 0xb2, 0xbb, 0x18,
	0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x09, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0xb2, 0xbb, 0x18, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0xca, 0xbb, 0x18,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x33, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x18, 0xb2, 0xbb, 0x18, 0x08, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0xca,
	0xbb, 0x18, 0x08, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xbb, 0x18, 0x07, 0x65, 0x72, 0x72, 0x5f, 0x6d,
	0x73, 0x67, 0xca, 0xbb, 0x18, 0x07, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x61, 0x64, 0x64, 0x72, 0xca, 0xbb, 0x18,
	0x04, 0x61, 0x64, 0x64, 0x72, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1c, 0xb2, 0xbb, 0x18, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0xca,
	0xbb, 0x18, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xbb, 0x18, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1c, 0xb2, 0xbb, 0x18, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0xca, 0xbb, 0x18, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c,
	0xb2, 0xbb, 0x18, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0xca, 0xbb,
	0x18, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xbd, 0x05, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xca, 0xbb,
	0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x04,
	0x6c, 0x61, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04,
	0x6c, 0x61, 0x6e, 0x67, 0xca, 0xbb, 0x18, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x52, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x16, 0xb2, 0xbb, 0x18, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0xca, 0xbb, 0x18, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xb2, 0xbb, 0x18,
	0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0xca,
	0xbb, 0x18, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x24, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xb2, 0xbb, 0x18, 0x04, 0x65, 0x78, 0x70, 0x72, 0xca, 0xbb, 0x18, 0x04, 0x65, 0x78, 0x70, 0x72,
	0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x64, 0x61, 0x74, 0x61, 0xca, 0xbb,
	0x18, 0x04, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x04,
	0x72, 0x65, 0x73, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04,
	0x72, 0x65, 0x73, 0x70, 0xca, 0xbb, 0x18, 0x04, 0x72, 0x65, 0x73, 0x70, 0x52, 0x04, 0x72, 0x65,
	0x73, 0x70, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x42, 0x1a, 0xb2, 0xbb, 0x18, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xbb, 0x18,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0xca, 0xbb, 0x18, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x65, 0x72, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x18, 0xb2, 0xbb, 0x18,
	0x08, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0xca, 0xbb, 0x18, 0x08, 0x65, 0x72, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f,
	0x0a, 0x07, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x16, 0xb2, 0xbb, 0x18, 0x07, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0xca, 0xbb, 0x18, 0x07,
	0x65, 0x72, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12,
	0x24, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2,
	0xbb, 0x18, 0x04, 0x61, 0x64, 0x64, 0x72, 0xca, 0xbb, 0x18, 0x04, 0x61, 0x64, 0x64, 0x72, 0x52,
	0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xb2, 0xbb, 0x18, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xbb, 0x18, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0xca, 0xbb, 0x18, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb8, 0x08, 0x0a, 0x09, 0x50, 0x75, 0x74, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xca, 0xbb, 0x18,
	0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xbb, 0x18, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0xca, 0xbb, 0x18, 0x0e, 0x6c, 0x61, 0x6e, 0x67, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x48, 0x01, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x45, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x27, 0xb2, 0xbb, 0x18, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0xca, 0xf3, 0x18,
	0x18, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x02, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e,
	0xb2, 0xbb, 0x18, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0xca, 0xbb, 0x18, 0x18, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x03,
	0x52, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1a, 0xb2, 0xbb, 0x18, 0x04, 0x65, 0x78, 0x70, 0x72, 0xca, 0xbb, 0x18, 0x0e, 0x65, 0x78,
	0x70, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x04, 0x52, 0x04,
	0x65, 0x78, 0x70, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x42, 0x1a, 0xb2, 0xbb, 0x18, 0x04, 0x64, 0x61, 0x74, 0x61, 0xca,
	0xbb, 0x18, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xbb, 0x18, 0x04, 0x72, 0x65, 0x73, 0x70, 0xca,
	0xbb, 0x18, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x48, 0x05, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x09,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x2b, 0xb2, 0xbb, 0x18, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0xca, 0xf3,
	0x18, 0x1a, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x06, 0x52, 0x08,
	0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xb2, 0xbb, 0x18,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0xca, 0xbb, 0x18, 0x10, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x07, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x29, 0xb2, 0xbb, 0x18, 0x08,
	0x65, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0xca, 0xf3, 0x18, 0x19, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x08, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xb2, 0xbb, 0x18, 0x07, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x73,
	0x67, 0xca, 0xbb, 0x18, 0x11, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1a, 0xb2, 0xbb, 0x18, 0x04, 0x61, 0x64, 0x64, 0x72, 0xca, 0xbb, 0x18, 0x0e, 0x61,
	0x64, 0x64, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x0a, 0x52,
	0x04, 0x61, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xb2, 0xbb,
	0x18, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x14,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x48, 0x0b, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xb2, 0xbb, 0x18, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x12, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x0c, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x65, 0x78,
	0x70, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x32, 0xab, 0x01, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x46, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x15, 0xca, 0xc1, 0x18, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2f, 0x6c, 0x6f, 0x67, 0x12, 0x55, 0x0a, 0x09, 0x41, 0x62, 0x6f,
	0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x6f,
	0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x1f, 0xd2, 0xc1, 0x18, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x62,
	0x6f, 0x72, 0x2f, 0x6c, 0x6f, 0x67, 0x2f, 0x3a, 0x69, 0x64, 0x2f, 0x61, 0x62, 0x6f, 0x72, 0x74,
	0x42, 0x1a, 0x5a, 0x18, 0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2f, 0x6b, 0x69, 0x74, 0x65, 0x78, 0x5f,
	0x67, 0x65, 0x6e, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x6f, 0x67, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_task_log_proto_rawDescOnce sync.Once
	file_task_log_proto_rawDescData = file_task_log_proto_rawDesc
)

func file_task_log_proto_rawDescGZIP() []byte {
	file_task_log_proto_rawDescOnce.Do(func() {
		file_task_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_task_log_proto_rawDescData)
	})
	return file_task_log_proto_rawDescData
}

var file_task_log_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_task_log_proto_goTypes = []interface{}{
	(*LogQuery)(nil),       // 0: task_log.LogQuery
	(*LogResp)(nil),        // 1: task_log.LogResp
	(*LogAllResp)(nil),     // 2: task_log.LogAllResp
	(*LogGetByIdResp)(nil), // 3: task_log.LogGetByIdResp
	(*PostLogReq)(nil),     // 4: task_log.PostLogReq
	(*PutLogReq)(nil),      // 5: task_log.PutLogReq
	(*task.TaskData)(nil),  // 6: task.TaskData
}
var file_task_log_proto_depIdxs = []int32{
	6, // 0: task_log.LogResp.data:type_name -> task.TaskData
	6, // 1: task_log.LogGetByIdResp.data:type_name -> task.TaskData
	6, // 2: task_log.PostLogReq.data:type_name -> task.TaskData
	6, // 3: task_log.PutLogReq.data:type_name -> task.TaskData
	0, // 4: task_log.LogService.GetLog:input_type -> task_log.LogQuery
	4, // 5: task_log.LogService.AbortTask:input_type -> task_log.PostLogReq
	1, // 6: task_log.LogService.GetLog:output_type -> task_log.LogResp
	1, // 7: task_log.LogService.AbortTask:output_type -> task_log.LogResp
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_task_log_proto_init() }
func file_task_log_proto_init() {
	if File_task_log_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_task_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_log_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_log_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogAllResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_log_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogGetByIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_log_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_log_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_task_log_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_task_log_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_task_log_proto_goTypes,
		DependencyIndexes: file_task_log_proto_depIdxs,
		MessageInfos:      file_task_log_proto_msgTypes,
	}.Build()
	File_task_log_proto = out.File
	file_task_log_proto_rawDesc = nil
	file_task_log_proto_goTypes = nil
	file_task_log_proto_depIdxs = nil
}
