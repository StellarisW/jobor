// idl/hello/hello.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v4.23.3
// source: worker.proto

package worker

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "jobor/kitex_gen/api"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WorkerQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" query:"id" form:"id" json:"id"`
	Hostname    string `protobuf:"bytes,2,opt,name=hostname,proto3" form:"hostname" json:"hostname" query:"hostname"`
	Ip          string `protobuf:"bytes,3,opt,name=ip,proto3" query:"ip" form:"ip" json:"ip"`
	Addr        string `protobuf:"bytes,4,opt,name=addr,proto3" query:"addr" form:"addr" json:"addr"`
	Version     string `protobuf:"bytes,5,opt,name=version,proto3" form:"version" json:"version" query:"version"`
	RoutingKey  string `protobuf:"bytes,6,opt,name=routing_key,json=routingKey,proto3" query:"routing_key" form:"routing_key" json:"routing_key"`
	Weight      int32  `protobuf:"varint,7,opt,name=weight,proto3" query:"weight" form:"weight" json:"weight"`
	LeaseUpdate int64  `protobuf:"varint,8,opt,name=lease_update,json=leaseUpdate,proto3" form:"lease_update" json:"lease_update" query:"lease_update"`
	Status      string `protobuf:"bytes,9,opt,name=status,proto3" query:"status" form:"status" json:"status"`
	Page        uint64 `protobuf:"varint,111,opt,name=page,proto3" json:"page" form:"page" query:"page"`
	PageSize    uint64 `protobuf:"varint,112,opt,name=pageSize,proto3" json:"pageSize" form:"pageSize" query:"pageSize"`
}

func (x *WorkerQuery) Reset() {
	*x = WorkerQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerQuery) ProtoMessage() {}

func (x *WorkerQuery) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerQuery.ProtoReflect.Descriptor instead.
func (*WorkerQuery) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{0}
}

func (x *WorkerQuery) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WorkerQuery) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *WorkerQuery) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *WorkerQuery) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *WorkerQuery) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *WorkerQuery) GetRoutingKey() string {
	if x != nil {
		return x.RoutingKey
	}
	return ""
}

func (x *WorkerQuery) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *WorkerQuery) GetLeaseUpdate() int64 {
	if x != nil {
		return x.LeaseUpdate
	}
	return 0
}

func (x *WorkerQuery) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WorkerQuery) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *WorkerQuery) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type WorkerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" query:"id" form:"id" json:"id"`
	Hostname    string `protobuf:"bytes,2,opt,name=hostname,proto3" form:"hostname" json:"hostname" query:"hostname"`
	Ip          string `protobuf:"bytes,3,opt,name=ip,proto3" query:"ip" form:"ip" json:"ip"`
	Addr        string `protobuf:"bytes,4,opt,name=addr,proto3" form:"addr" json:"addr" query:"addr"`
	Version     string `protobuf:"bytes,5,opt,name=version,proto3" form:"version" json:"version" query:"version"`
	RoutingKey  string `protobuf:"bytes,6,opt,name=routing_key,json=routingKey,proto3" query:"routing_key" form:"routing_key" json:"routing_key"`
	Weight      int32  `protobuf:"varint,7,opt,name=weight,proto3" query:"weight" form:"weight" json:"weight"`
	LeaseUpdate int64  `protobuf:"varint,8,opt,name=lease_update,json=leaseUpdate,proto3" form:"lease_update" json:"lease_update" query:"lease_update"`
	Status      string `protobuf:"bytes,9,opt,name=status,proto3" query:"status" form:"status" json:"status"`
	CreatedAt   string `protobuf:"bytes,110,opt,name=created_at,json=createdAt,proto3" query:"created_at" form:"created_at" json:"created_at"`
	UpdatedAt   string `protobuf:"bytes,120,opt,name=updated_at,json=updatedAt,proto3" query:"updated_at" form:"updated_at" json:"updated_at"`
}

func (x *WorkerResp) Reset() {
	*x = WorkerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerResp) ProtoMessage() {}

func (x *WorkerResp) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerResp.ProtoReflect.Descriptor instead.
func (*WorkerResp) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{1}
}

func (x *WorkerResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WorkerResp) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *WorkerResp) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *WorkerResp) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *WorkerResp) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *WorkerResp) GetRoutingKey() string {
	if x != nil {
		return x.RoutingKey
	}
	return ""
}

func (x *WorkerResp) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *WorkerResp) GetLeaseUpdate() int64 {
	if x != nil {
		return x.LeaseUpdate
	}
	return 0
}

func (x *WorkerResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WorkerResp) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *WorkerResp) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type WorkerAllResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" form:"id" json:"id" query:"id"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" form:"name" json:"name" query:"name"`
}

func (x *WorkerAllResp) Reset() {
	*x = WorkerAllResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerAllResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerAllResp) ProtoMessage() {}

func (x *WorkerAllResp) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerAllResp.ProtoReflect.Descriptor instead.
func (*WorkerAllResp) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{2}
}

func (x *WorkerAllResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WorkerAllResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type WorkerGetByIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id" query:"id"`
	Hostname    string `protobuf:"bytes,2,opt,name=hostname,proto3" query:"hostname" form:"hostname" json:"hostname"`
	Ip          string `protobuf:"bytes,3,opt,name=ip,proto3" form:"ip" json:"ip" query:"ip"`
	Addr        string `protobuf:"bytes,4,opt,name=addr,proto3" query:"addr" form:"addr" json:"addr"`
	Version     string `protobuf:"bytes,5,opt,name=version,proto3" query:"version" form:"version" json:"version"`
	RoutingKey  string `protobuf:"bytes,6,opt,name=routing_key,json=routingKey,proto3" form:"routing_key" json:"routing_key" query:"routing_key"`
	Weight      int32  `protobuf:"varint,7,opt,name=weight,proto3" query:"weight" form:"weight" json:"weight"`
	LeaseUpdate int64  `protobuf:"varint,8,opt,name=lease_update,json=leaseUpdate,proto3" query:"lease_update" form:"lease_update" json:"lease_update"`
	Status      string `protobuf:"bytes,9,opt,name=status,proto3" query:"status" form:"status" json:"status"`
	CreatedAt   string `protobuf:"bytes,110,opt,name=created_at,json=createdAt,proto3" form:"created_at" json:"created_at" query:"created_at"`
	UpdatedAt   string `protobuf:"bytes,120,opt,name=updated_at,json=updatedAt,proto3" query:"updated_at" form:"updated_at" json:"updated_at"`
}

func (x *WorkerGetByIdResp) Reset() {
	*x = WorkerGetByIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerGetByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerGetByIdResp) ProtoMessage() {}

func (x *WorkerGetByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerGetByIdResp.ProtoReflect.Descriptor instead.
func (*WorkerGetByIdResp) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{3}
}

func (x *WorkerGetByIdResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WorkerGetByIdResp) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *WorkerGetByIdResp) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *WorkerGetByIdResp) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *WorkerGetByIdResp) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *WorkerGetByIdResp) GetRoutingKey() string {
	if x != nil {
		return x.RoutingKey
	}
	return ""
}

func (x *WorkerGetByIdResp) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *WorkerGetByIdResp) GetLeaseUpdate() int64 {
	if x != nil {
		return x.LeaseUpdate
	}
	return 0
}

func (x *WorkerGetByIdResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WorkerGetByIdResp) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *WorkerGetByIdResp) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type PostWorkerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname    string `protobuf:"bytes,2,opt,name=hostname,proto3" query:"hostname" form:"hostname" json:"hostname"`
	Ip          string `protobuf:"bytes,3,opt,name=ip,proto3" query:"ip" form:"ip" json:"ip"`
	Addr        string `protobuf:"bytes,4,opt,name=addr,proto3" query:"addr" form:"addr" json:"addr"`
	Version     string `protobuf:"bytes,5,opt,name=version,proto3" query:"version" form:"version" json:"version"`
	RoutingKey  string `protobuf:"bytes,6,opt,name=routing_key,json=routingKey,proto3" query:"routing_key" form:"routing_key" json:"routing_key"`
	Weight      int32  `protobuf:"varint,7,opt,name=weight,proto3" query:"weight" form:"weight" json:"weight"`
	LeaseUpdate int64  `protobuf:"varint,8,opt,name=lease_update,json=leaseUpdate,proto3" form:"lease_update" json:"lease_update" query:"lease_update"`
	Status      string `protobuf:"bytes,9,opt,name=status,proto3" form:"status" json:"status" query:"status"`
}

func (x *PostWorkerReq) Reset() {
	*x = PostWorkerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostWorkerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostWorkerReq) ProtoMessage() {}

func (x *PostWorkerReq) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostWorkerReq.ProtoReflect.Descriptor instead.
func (*PostWorkerReq) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{4}
}

func (x *PostWorkerReq) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *PostWorkerReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PostWorkerReq) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *PostWorkerReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PostWorkerReq) GetRoutingKey() string {
	if x != nil {
		return x.RoutingKey
	}
	return ""
}

func (x *PostWorkerReq) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *PostWorkerReq) GetLeaseUpdate() int64 {
	if x != nil {
		return x.LeaseUpdate
	}
	return 0
}

func (x *PostWorkerReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type PutWorkerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname    *string `protobuf:"bytes,2,opt,name=hostname,proto3,oneof" query:"hostname" form:"hostname,omitempty" json:"hostname,omitempty"`
	Ip          *string `protobuf:"bytes,3,opt,name=ip,proto3,oneof" form:"ip,omitempty" json:"ip,omitempty" query:"ip"`
	Addr        *string `protobuf:"bytes,4,opt,name=addr,proto3,oneof" query:"addr" form:"addr,omitempty" json:"addr,omitempty"`
	Version     *string `protobuf:"bytes,5,opt,name=version,proto3,oneof" query:"version" form:"version,omitempty" json:"version,omitempty"`
	RoutingKey  *string `protobuf:"bytes,6,opt,name=routing_key,json=routingKey,proto3,oneof" query:"routing_key" form:"routing_key,omitempty" json:"routing_key,omitempty"`
	Weight      *int32  `protobuf:"varint,7,opt,name=weight,proto3,oneof" query:"weight" json:"weight,omitempty"`
	LeaseUpdate *int64  `protobuf:"varint,8,opt,name=lease_update,json=leaseUpdate,proto3,oneof" query:"lease_update" json:"lease_update,omitempty"`
	Status      *string `protobuf:"bytes,9,opt,name=status,proto3,oneof" form:"status,omitempty" json:"status,omitempty" query:"status"`
}

func (x *PutWorkerReq) Reset() {
	*x = PutWorkerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutWorkerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutWorkerReq) ProtoMessage() {}

func (x *PutWorkerReq) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutWorkerReq.ProtoReflect.Descriptor instead.
func (*PutWorkerReq) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{5}
}

func (x *PutWorkerReq) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *PutWorkerReq) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *PutWorkerReq) GetAddr() string {
	if x != nil && x.Addr != nil {
		return *x.Addr
	}
	return ""
}

func (x *PutWorkerReq) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *PutWorkerReq) GetRoutingKey() string {
	if x != nil && x.RoutingKey != nil {
		return *x.RoutingKey
	}
	return ""
}

func (x *PutWorkerReq) GetWeight() int32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *PutWorkerReq) GetLeaseUpdate() int64 {
	if x != nil && x.LeaseUpdate != nil {
		return *x.LeaseUpdate
	}
	return 0
}

func (x *PutWorkerReq) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

var File_worker_proto protoreflect.FileDescriptor

var file_worker_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x1a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xe9, 0x03, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0c, 0xb2,
	0xbb, 0x18, 0x02, 0x69, 0x64, 0xca, 0xbb, 0x18, 0x02, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x34, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0xb2, 0xbb, 0x18, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0xca,
	0xbb, 0x18, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xb2, 0xbb, 0x18, 0x02, 0x69, 0x70, 0xca, 0xbb, 0x18, 0x02, 0x69, 0x70, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x61, 0x64, 0x64, 0x72, 0xca, 0xbb, 0x18, 0x04, 0x61,
	0x64, 0x64, 0x72, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xbb, 0x18, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0xca, 0xbb, 0x18, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1e, 0xb2, 0xbb, 0x18, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65,
	0x79, 0xca, 0xbb, 0x18, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79,
	0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0xb2, 0xbb,
	0x18, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0xca, 0xbb, 0x18, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x20, 0xb2, 0xbb, 0x18, 0x0c, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0xca, 0xbb, 0x18, 0x0c, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0xb2, 0xbb, 0x18, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xca, 0xbb, 0x18, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x70, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xb2, 0x04,
	0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0c, 0xb2, 0xbb, 0x18, 0x02, 0x69, 0x64,
	0xca, 0xbb, 0x18, 0x02, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xbb,
	0x18, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xbb,
	0x18, 0x02, 0x69, 0x70, 0xca, 0xbb, 0x18, 0x02, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x24,
	0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb,
	0x18, 0x04, 0x61, 0x64, 0x64, 0x72, 0xca, 0xbb, 0x18, 0x04, 0x61, 0x64, 0x64, 0x72, 0x52, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xbb, 0x18, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0xca, 0xbb, 0x18, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xb2, 0xbb, 0x18,
	0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0xca, 0xbb, 0x18, 0x0b,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x52, 0x0a, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0xb2, 0xbb, 0x18, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0xca, 0xbb, 0x18, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x20, 0xb2, 0xbb, 0x18,
	0x0c, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0xca, 0xbb, 0x18,
	0x0c, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xbb, 0x18, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xca, 0xbb, 0x18, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xb2, 0xbb,
	0x18, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0xca, 0xbb, 0x18, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xb2, 0xbb, 0x18, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0xca, 0xbb, 0x18, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x53, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x0c, 0xb2, 0xbb, 0x18, 0x02, 0x69, 0x64, 0xca, 0xbb, 0x18, 0x02, 0x69, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0xb2, 0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb3, 0x04, 0x0a, 0x11, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xb2, 0xbb, 0x18, 0x02, 0x69,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xbb, 0x18, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xbb, 0x18, 0x02, 0x69, 0x70, 0xca,
	0xbb, 0x18, 0x02, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x61, 0x64, 0x64,
	0x72, 0xca, 0xbb, 0x18, 0x04, 0x61, 0x64, 0x64, 0x72, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12,
	0x30, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x16, 0xb2, 0xbb, 0x18, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0xca, 0xbb, 0x18,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xb2, 0xbb, 0x18, 0x0b, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0xca, 0xbb, 0x18, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x14, 0xb2, 0xbb, 0x18, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0xca, 0xbb,
	0x18, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x43, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x20, 0xb2, 0xbb, 0x18, 0x0c, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0xca, 0xbb, 0x18, 0x0c, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xbb, 0x18, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0xca, 0xbb, 0x18, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xb2, 0xbb, 0x18, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0xca, 0xbb, 0x18, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x3b, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x78,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xb2, 0xbb, 0x18, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0xca, 0xbb, 0x18, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x9d, 0x03,
	0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x34, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0xb2, 0xbb, 0x18, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0xca,
	0xbb, 0x18, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xb2, 0xbb, 0x18, 0x02, 0x69, 0x70, 0xca, 0xbb, 0x18, 0x02, 0x69, 0x70, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x61, 0x64, 0x64, 0x72, 0xca, 0xbb, 0x18, 0x04, 0x61,
	0x64, 0x64, 0x72, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xbb, 0x18, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0xca, 0xbb, 0x18, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1e, 0xb2, 0xbb, 0x18, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65,
	0x79, 0xca, 0xbb, 0x18, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79,
	0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0xb2, 0xbb,
	0x18, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0xca, 0xbb, 0x18, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x20, 0xb2, 0xbb, 0x18, 0x0c, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0xca, 0xbb, 0x18, 0x0c, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0xb2, 0xbb, 0x18, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xca, 0xbb, 0x18, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x82, 0x05,
	0x0a, 0x0c, 0x50, 0x75, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x43,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x22, 0xb2, 0xbb, 0x18, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0xca, 0xbb,
	0x18, 0x12, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x16, 0xb2, 0xbb, 0x18, 0x02, 0x69, 0x70, 0xca, 0xbb, 0x18, 0x0c, 0x69, 0x70, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x01, 0x52, 0x02, 0x69, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a,
	0xb2, 0xbb, 0x18, 0x04, 0x61, 0x64, 0x64, 0x72, 0xca, 0xbb, 0x18, 0x0e, 0x61, 0x64, 0x64, 0x72,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x02, 0x52, 0x04, 0x61, 0x64,
	0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xb2, 0xbb, 0x18, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0xca, 0xbb, 0x18, 0x11, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xb2, 0xbb, 0x18,
	0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0xca, 0xbb, 0x18, 0x15,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x04, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x25, 0xb2, 0xbb, 0x18, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0xca, 0xf3, 0x18, 0x17, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x05, 0x52,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x0c, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x31, 0xb2, 0xbb, 0x18, 0x0c, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0xca, 0xf3, 0x18, 0x1d, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x48, 0x06, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xb2, 0xbb, 0x18, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0xca, 0xbb, 0x18, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x07, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x32, 0x8d, 0x04, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x41, 0x6c, 0x6c, 0x12, 0x13, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x15, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x19, 0xca, 0xc1, 0x18, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f,
	0x62, 0x6f, 0x72, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12, 0x13, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x1a, 0x12, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1c, 0xca, 0xc1, 0x18, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2f,
	0x3a, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x12, 0x13, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x12, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x18, 0xca, 0xc1, 0x18, 0x14, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x12, 0x15, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x18, 0xd2, 0xc1,
	0x18, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x09, 0x50, 0x75, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1c, 0xda,
	0xc1, 0x18, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x6f, 0x72,
	0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2f, 0x3a, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x1a, 0x12, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x1c, 0xe2, 0xc1, 0x18, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2f, 0x3a,
	0x69, 0x64, 0x42, 0x18, 0x5a, 0x16, 0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2f, 0x6b, 0x69, 0x74, 0x65,
	0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_worker_proto_rawDescOnce sync.Once
	file_worker_proto_rawDescData = file_worker_proto_rawDesc
)

func file_worker_proto_rawDescGZIP() []byte {
	file_worker_proto_rawDescOnce.Do(func() {
		file_worker_proto_rawDescData = protoimpl.X.CompressGZIP(file_worker_proto_rawDescData)
	})
	return file_worker_proto_rawDescData
}

var file_worker_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_worker_proto_goTypes = []interface{}{
	(*WorkerQuery)(nil),       // 0: worker.WorkerQuery
	(*WorkerResp)(nil),        // 1: worker.WorkerResp
	(*WorkerAllResp)(nil),     // 2: worker.WorkerAllResp
	(*WorkerGetByIdResp)(nil), // 3: worker.WorkerGetByIdResp
	(*PostWorkerReq)(nil),     // 4: worker.PostWorkerReq
	(*PutWorkerReq)(nil),      // 5: worker.PutWorkerReq
}
var file_worker_proto_depIdxs = []int32{
	0, // 0: worker.WorkerService.GetWorkerAll:input_type -> worker.WorkerQuery
	0, // 1: worker.WorkerService.GetWorkerById:input_type -> worker.WorkerQuery
	0, // 2: worker.WorkerService.GetWorker:input_type -> worker.WorkerQuery
	4, // 3: worker.WorkerService.PostWorker:input_type -> worker.PostWorkerReq
	5, // 4: worker.WorkerService.PutWorker:input_type -> worker.PutWorkerReq
	0, // 5: worker.WorkerService.DeleteWorker:input_type -> worker.WorkerQuery
	2, // 6: worker.WorkerService.GetWorkerAll:output_type -> worker.WorkerAllResp
	1, // 7: worker.WorkerService.GetWorkerById:output_type -> worker.WorkerResp
	1, // 8: worker.WorkerService.GetWorker:output_type -> worker.WorkerResp
	1, // 9: worker.WorkerService.PostWorker:output_type -> worker.WorkerResp
	1, // 10: worker.WorkerService.PutWorker:output_type -> worker.WorkerResp
	1, // 11: worker.WorkerService.DeleteWorker:output_type -> worker.WorkerResp
	6, // [6:12] is the sub-list for method output_type
	0, // [0:6] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_worker_proto_init() }
func file_worker_proto_init() {
	if File_worker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_worker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerAllResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerGetByIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostWorkerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutWorkerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_worker_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_worker_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_worker_proto_goTypes,
		DependencyIndexes: file_worker_proto_depIdxs,
		MessageInfos:      file_worker_proto_msgTypes,
	}.Build()
	File_worker_proto = out.File
	file_worker_proto_rawDesc = nil
	file_worker_proto_goTypes = nil
	file_worker_proto_depIdxs = nil
}
