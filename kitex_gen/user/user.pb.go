// idl/hello/hello.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v4.23.3
// source: user.proto

package user

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	_ "jobor/kitex_gen/api"
	base "jobor/kitex_gen/base"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserType int32

const (
	UserType_local UserType = 0
	UserType_ldap  UserType = 1
	UserType_sso   UserType = 2
)

// Enum value maps for UserType.
var (
	UserType_name = map[int32]string{
		0: "local",
		1: "ldap",
		2: "sso",
	}
	UserType_value = map[string]int32{
		"local": 0,
		"ldap":  1,
		"sso":   2,
	}
)

func (x UserType) Enum() *UserType {
	p := new(UserType)
	*p = x
	return p
}

func (x UserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserType) Descriptor() protoreflect.EnumDescriptor {
	return file_user_proto_enumTypes[0].Descriptor()
}

func (UserType) Type() protoreflect.EnumType {
	return &file_user_proto_enumTypes[0]
}

func (x UserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserType.Descriptor instead.
func (UserType) EnumDescriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{0}
}

type UserQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" form:"username" json:"username" query:"id"`
	Name     string `protobuf:"bytes,20,opt,name=name,proto3" form:"name" json:"name" query:"name"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" query:"username" form:"username" json:"username"`
	Nickname string `protobuf:"bytes,3,opt,name=nickname,proto3" query:"nickname" form:"nickname" json:"nickname"`
	UserType string `protobuf:"bytes,4,opt,name=user_type,json=userType,proto3" query:"user_type" form:"user_type" json:"user_type"`
	Status   bool   `protobuf:"varint,5,opt,name=status,proto3" form:"status" json:"status" query:"status"`
	Page     uint64 `protobuf:"varint,11,opt,name=page,proto3" json:"page" form:"page" query:"page"`
	PageSize uint64 `protobuf:"varint,12,opt,name=pageSize,proto3" json:"pageSize" form:"pageSize" query:"pageSize"`
}

func (x *UserQuery) Reset() {
	*x = UserQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserQuery) ProtoMessage() {}

func (x *UserQuery) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserQuery.ProtoReflect.Descriptor instead.
func (*UserQuery) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{0}
}

func (x *UserQuery) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserQuery) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserQuery) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserQuery) GetUserType() string {
	if x != nil {
		return x.UserType
	}
	return ""
}

func (x *UserQuery) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *UserQuery) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserQuery) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type Userinfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64    `protobuf:"varint,2,opt,name=id,proto3" query:"id" form:"id" json:"id"`
	Username string   `protobuf:"bytes,3,opt,name=username,proto3" query:"username" form:"username" json:"username"`
	Nickname string   `protobuf:"bytes,4,opt,name=nickname,proto3" form:"nickname" json:"nickname" query:"nickname"`
	Email    string   `protobuf:"bytes,5,opt,name=email,proto3" form:"email" json:"email" query:"email"`
	Avatar   string   `protobuf:"bytes,7,opt,name=avatar,proto3" query:"avatar" form:"avatar" json:"avatar"`
	Empno    string   `protobuf:"bytes,8,opt,name=empno,proto3" query:"empno" form:"empno" json:"empno"`
	UserType string   `protobuf:"bytes,9,opt,name=user_type,json=userType,proto3" form:"user_type" json:"user_type" query:"user_type"`
	Userid   string   `protobuf:"bytes,10,opt,name=userid,proto3" form:"userid" json:"userid" query:"userid"`
	Roles    []string `protobuf:"bytes,20,rep,name=roles,proto3" form:"roles" gorm:"-" json:"roles" query:"roles"`
	Status   bool     `protobuf:"varint,15,opt,name=status,proto3" query:"status" form:"status" json:"status"` //  string Token = 6[(api.query)="token",(api.body)="token"];
}

func (x *Userinfo) Reset() {
	*x = Userinfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Userinfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Userinfo) ProtoMessage() {}

func (x *Userinfo) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Userinfo.ProtoReflect.Descriptor instead.
func (*Userinfo) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{1}
}

func (x *Userinfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Userinfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Userinfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Userinfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Userinfo) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Userinfo) GetEmpno() string {
	if x != nil {
		return x.Empno
	}
	return ""
}

func (x *Userinfo) GetUserType() string {
	if x != nil {
		return x.UserType
	}
	return ""
}

func (x *Userinfo) GetUserid() string {
	if x != nil {
		return x.Userid
	}
	return ""
}

func (x *Userinfo) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Userinfo) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type UserAllResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id" query:"id"`
	Username string `protobuf:"bytes,3,opt,name=username,proto3" form:"username" json:"username" query:"username"`
	Nickname string `protobuf:"bytes,4,opt,name=nickname,proto3" form:"nickname" json:"nickname" query:"nickname"`
	Status   bool   `protobuf:"varint,5,opt,name=status,proto3" query:"status" form:"status" json:"status"`
}

func (x *UserAllResp) Reset() {
	*x = UserAllResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAllResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAllResp) ProtoMessage() {}

func (x *UserAllResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAllResp.ProtoReflect.Descriptor instead.
func (*UserAllResp) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{2}
}

func (x *UserAllResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserAllResp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserAllResp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserAllResp) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type UserGetByIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id" query:"id"`
	Username string   `protobuf:"bytes,3,opt,name=username,proto3" query:"username" form:"username" json:"username"`
	Nickname string   `protobuf:"bytes,4,opt,name=nickname,proto3" form:"nickname" json:"nickname" query:"nickname"`
	Roles    []string `protobuf:"bytes,6,rep,name=roles,proto3" query:"roles" form:"roles" json:"roles"`
}

func (x *UserGetByIdResp) Reset() {
	*x = UserGetByIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGetByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGetByIdResp) ProtoMessage() {}

func (x *UserGetByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGetByIdResp.ProtoReflect.Descriptor instead.
func (*UserGetByIdResp) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{3}
}

func (x *UserGetByIdResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserGetByIdResp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserGetByIdResp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserGetByIdResp) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type UserPostResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id" form:"id" query:"id"`
	Username string   `protobuf:"bytes,3,opt,name=username,proto3" json:"username" form:"username" query:"username"`
	Nickname string   `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname" form:"nickname" query:"nickname"`
	Token    string   `protobuf:"bytes,5,opt,name=token,proto3" json:"token" form:"token" query:"token"`
	Roles    []string `protobuf:"bytes,6,rep,name=roles,proto3" json:"roles" form:"roles" query:"roles"` //  repeated role.RoleAll roles = 6;
}

func (x *UserPostResp) Reset() {
	*x = UserPostResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPostResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPostResp) ProtoMessage() {}

func (x *UserPostResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPostResp.ProtoReflect.Descriptor instead.
func (*UserPostResp) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{4}
}

func (x *UserPostResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserPostResp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserPostResp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserPostResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UserPostResp) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type PostUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string  `protobuf:"bytes,2,opt,name=password,proto3" form:"password,required" json:"password,required" query:"password"`
	Username string  `protobuf:"bytes,3,opt,name=username,proto3" query:"username" form:"username,required" json:"username,required"`
	Nickname string  `protobuf:"bytes,4,opt,name=nickname,proto3" form:"nickname,required" json:"nickname,required" query:"nickname"`
	Avatar   string  `protobuf:"bytes,5,opt,name=avatar,proto3" query:"avatar" form:"avatar" json:"avatar"`
	UserType string  `protobuf:"bytes,6,opt,name=user_type,json=userType,proto3" query:"user_type" form:"user_type" json:"user_type"`
	Phone    string  `protobuf:"bytes,7,opt,name=phone,proto3" form:"phone" json:"phone" query:"phone"`
	Email    string  `protobuf:"bytes,8,opt,name=email,proto3" query:"email" form:"email" json:"email"`
	Userid   string  `protobuf:"bytes,9,opt,name=userid,proto3" query:"userid" form:"userid" json:"userid"`
	RoleIds  []int64 `protobuf:"varint,10,rep,packed,name=role_ids,json=roleIds,proto3" query:"role_ids,omitempty" form:"role_ids,omitempty" gorm:"-" ignore:"yes" json:"role_ids,omitempty"`
	Status   bool    `protobuf:"varint,13,opt,name=status,proto3" query:"status" json:"status"`
}

func (x *PostUserReq) Reset() {
	*x = PostUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostUserReq) ProtoMessage() {}

func (x *PostUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostUserReq.ProtoReflect.Descriptor instead.
func (*PostUserReq) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{5}
}

func (x *PostUserReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *PostUserReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PostUserReq) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *PostUserReq) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *PostUserReq) GetUserType() string {
	if x != nil {
		return x.UserType
	}
	return ""
}

func (x *PostUserReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *PostUserReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *PostUserReq) GetUserid() string {
	if x != nil {
		return x.Userid
	}
	return ""
}

func (x *PostUserReq) GetRoleIds() []int64 {
	if x != nil {
		return x.RoleIds
	}
	return nil
}

func (x *PostUserReq) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type PutUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname *string             `protobuf:"bytes,4,opt,name=nickname,proto3,oneof" query:"nickname" form:"nickname,omitempty" json:"nickname,omitempty"`
	Avatar   *string             `protobuf:"bytes,5,opt,name=avatar,proto3,oneof" form:"avatar,omitempty" json:"avatar,omitempty" query:"avatar"`
	UserType *string             `protobuf:"bytes,6,opt,name=user_type,json=userType,proto3,oneof" query:"user_type" form:"user_type,omitempty" json:"user_type,omitempty"`
	Phone    *string             `protobuf:"bytes,7,opt,name=phone,proto3,oneof" query:"phone" form:"phone,omitempty" json:"phone,omitempty"`
	Email    *string             `protobuf:"bytes,8,opt,name=email,proto3,oneof" query:"email" form:"email,omitempty" json:"email,omitempty"`
	Userid   *string             `protobuf:"bytes,9,opt,name=userid,proto3,oneof" form:"userid,omitempty" json:"userid,omitempty" query:"userid"`
	Status   *bool               `protobuf:"varint,13,opt,name=status,proto3,oneof" query:"status" json:"status,omitempty"`
	RoleIds  *structpb.ListValue `protobuf:"bytes,10,opt,name=role_ids,json=roleIds,proto3" form:"role_ids,omitempty" gorm:"-" ignore:"yes" json:"role_ids,omitempty" query:"role_ids,omitempty"`
	Updater  *string             `protobuf:"bytes,60,opt,name=updater,proto3,oneof" query:"-" form:"updater,omitempty" gorm:"-" ignore:"yes" json:"updater,omitempty"`
}

func (x *PutUserReq) Reset() {
	*x = PutUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutUserReq) ProtoMessage() {}

func (x *PutUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutUserReq.ProtoReflect.Descriptor instead.
func (*PutUserReq) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{6}
}

func (x *PutUserReq) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *PutUserReq) GetAvatar() string {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return ""
}

func (x *PutUserReq) GetUserType() string {
	if x != nil && x.UserType != nil {
		return *x.UserType
	}
	return ""
}

func (x *PutUserReq) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *PutUserReq) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *PutUserReq) GetUserid() string {
	if x != nil && x.Userid != nil {
		return *x.Userid
	}
	return ""
}

func (x *PutUserReq) GetStatus() bool {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return false
}

func (x *PutUserReq) GetRoleIds() *structpb.ListValue {
	if x != nil {
		return x.RoleIds
	}
	return nil
}

func (x *PutUserReq) GetUpdater() string {
	if x != nil && x.Updater != nil {
		return *x.Updater
	}
	return ""
}

type UserPutResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id" form:"id" query:"id"`
	Username string   `protobuf:"bytes,3,opt,name=username,proto3" json:"username" form:"username" query:"username"`
	Nickname string   `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname" form:"nickname" query:"nickname"`
	Token    string   `protobuf:"bytes,5,opt,name=token,proto3" json:"token" form:"token" query:"token"`
	Roles    []string `protobuf:"bytes,6,rep,name=roles,proto3" json:"roles" form:"roles" query:"roles"`
}

func (x *UserPutResp) Reset() {
	*x = UserPutResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPutResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPutResp) ProtoMessage() {}

func (x *UserPutResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPutResp.ProtoReflect.Descriptor instead.
func (*UserPutResp) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{7}
}

func (x *UserPutResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserPutResp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserPutResp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserPutResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UserPutResp) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type UserPutPasswordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id" form:"id" query:"id"`
	Username string   `protobuf:"bytes,3,opt,name=username,proto3" json:"username" form:"username" query:"username"`
	Nickname string   `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname" form:"nickname" query:"nickname"`
	Token    string   `protobuf:"bytes,5,opt,name=token,proto3" json:"token" form:"token" query:"token"`
	Roles    []string `protobuf:"bytes,6,rep,name=roles,proto3" json:"roles" form:"roles" query:"roles"`
}

func (x *UserPutPasswordResp) Reset() {
	*x = UserPutPasswordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPutPasswordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPutPasswordResp) ProtoMessage() {}

func (x *UserPutPasswordResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPutPasswordResp.ProtoReflect.Descriptor instead.
func (*UserPutPasswordResp) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{8}
}

func (x *UserPutPasswordResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserPutPasswordResp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserPutPasswordResp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserPutPasswordResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UserPutPasswordResp) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type UserPutPassResetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id" form:"id" query:"id"`
	Username string   `protobuf:"bytes,3,opt,name=username,proto3" json:"username" form:"username" query:"username"`
	Nickname string   `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname" form:"nickname" query:"nickname"`
	Token    string   `protobuf:"bytes,5,opt,name=token,proto3" json:"token" form:"token" query:"token"`
	Roles    []string `protobuf:"bytes,6,rep,name=roles,proto3" json:"roles" form:"roles" query:"roles"`
}

func (x *UserPutPassResetResp) Reset() {
	*x = UserPutPassResetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPutPassResetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPutPassResetResp) ProtoMessage() {}

func (x *UserPutPassResetResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPutPassResetResp.ProtoReflect.Descriptor instead.
func (*UserPutPassResetResp) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{9}
}

func (x *UserPutPassResetResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserPutPassResetResp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserPutPassResetResp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserPutPassResetResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UserPutPassResetResp) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type UserPutProfileResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id" form:"id" query:"id"`
	Username string   `protobuf:"bytes,3,opt,name=username,proto3" json:"username" form:"username" query:"username"`
	Nickname string   `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname" form:"nickname" query:"nickname"`
	Token    string   `protobuf:"bytes,5,opt,name=token,proto3" json:"token" form:"token" query:"token"`
	Roles    []string `protobuf:"bytes,6,rep,name=roles,proto3" json:"roles" form:"roles" query:"roles"`
}

func (x *UserPutProfileResp) Reset() {
	*x = UserPutProfileResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPutProfileResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPutProfileResp) ProtoMessage() {}

func (x *UserPutProfileResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPutProfileResp.ProtoReflect.Descriptor instead.
func (*UserPutProfileResp) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{10}
}

func (x *UserPutProfileResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserPutProfileResp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserPutProfileResp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserPutProfileResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UserPutProfileResp) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type UserDeleteResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id" form:"id" query:"id"`
	Username string   `protobuf:"bytes,3,opt,name=username,proto3" json:"username" form:"username" query:"username"`
	Nickname string   `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname" form:"nickname" query:"nickname"`
	Token    string   `protobuf:"bytes,5,opt,name=token,proto3" json:"token" form:"token" query:"token"`
	Roles    []string `protobuf:"bytes,6,rep,name=roles,proto3" json:"roles" form:"roles" query:"roles"`
}

func (x *UserDeleteResp) Reset() {
	*x = UserDeleteResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeleteResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeleteResp) ProtoMessage() {}

func (x *UserDeleteResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeleteResp.ProtoReflect.Descriptor instead.
func (*UserDeleteResp) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{11}
}

func (x *UserDeleteResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserDeleteResp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserDeleteResp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserDeleteResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UserDeleteResp) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

var File_user_proto protoreflect.FileDescriptor

var file_user_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x1a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd8, 0x02, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x12, 0xb2, 0xbb, 0x18, 0x02, 0x69, 0x64, 0xca, 0xbb, 0x18, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0xca, 0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0xb2, 0xbb, 0x18, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0xca,
	0xbb, 0x18, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xbb, 0x18, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a,
	0xb2, 0xbb, 0x18, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xca, 0xbb, 0x18,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x14, 0xb2, 0xbb, 0x18, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0xca, 0xbb, 0x18, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0xe1, 0x03, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x1c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0c, 0xb2, 0xbb, 0x18,
	0x02, 0x69, 0x64, 0xca, 0xbb, 0x18, 0x02, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0xb2, 0xbb, 0x18, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0xca, 0xbb, 0x18,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xbb, 0x18, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xb2, 0xbb, 0x18, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0xca, 0xbb, 0x18, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xbb, 0x18, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0xca,
	0xbb, 0x18, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x6e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x12, 0xb2, 0xbb, 0x18, 0x05, 0x65, 0x6d, 0x70, 0x6e, 0x6f, 0xca, 0xbb, 0x18, 0x05, 0x65,
	0x6d, 0x70, 0x6e, 0x6f, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x6e, 0x6f, 0x12, 0x37, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a,
	0xb2, 0xbb, 0x18, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xca, 0xbb, 0x18,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xbb, 0x18, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64,
	0xca, 0xbb, 0x18, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x69, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x1e, 0xb2, 0xbb, 0x18, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0xca, 0xbb, 0x18, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0xca, 0xf3, 0x18, 0x08, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d,
	0x22, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x14, 0xb2, 0xbb, 0x18, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0xca, 0xbb, 0x18, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x06, 0xb2, 0xbb, 0x18, 0x02, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0xb2, 0xbb, 0x18, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0xca, 0xbb,
	0x18, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xbb, 0x18, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x14, 0xb2, 0xbb, 0x18, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xca, 0xbb, 0x18, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x0f, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xb2, 0xbb, 0x18, 0x02, 0x69, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xbb, 0x18, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xbb,
	0x18, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x12, 0xb2, 0xbb, 0x18, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0xca, 0xbb, 0x18, 0x05, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x0c, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22,
	0xca, 0x04, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x3d, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x21, 0xb2, 0xbb, 0x18, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0xca,
	0xbb, 0x18, 0x11, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2c, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3d,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x21, 0xb2, 0xbb, 0x18, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0xca, 0xbb,
	0x18, 0x11, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x21, 0xb2, 0xbb, 0x18, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0xca, 0xbb, 0x18,
	0x11, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xbb,
	0x18, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0xca, 0xbb, 0x18, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x37, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2,
	0xbb, 0x18, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xca, 0xbb, 0x18, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x12, 0xb2, 0xbb, 0x18, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0xca, 0xbb, 0x18,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x28, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xb2, 0xbb,
	0x18, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0xca, 0xbb, 0x18, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xbb, 0x18, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x64, 0xca, 0xbb, 0x18, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x60, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x42, 0x45, 0xb2, 0xbb, 0x18, 0x12, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xca,
	0xbb, 0x18, 0x12, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0xca, 0xf3, 0x18, 0x15, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d,
	0x22, 0x20, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x3a, 0x22, 0x79, 0x65, 0x73, 0x22, 0x52, 0x07,
	0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1b, 0xb2, 0xbb, 0x18, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0xca, 0xf3, 0x18, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf7, 0x05, 0x0a,
	0x0a, 0x50, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x43, 0x0a, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xb2,
	0xbb, 0x18, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x12, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x3b, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1e, 0xb2, 0xbb, 0x18, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0xca, 0xbb, 0x18, 0x10,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x48, 0x01, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0xb2, 0xbb, 0x18, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xca,
	0xbb, 0x18, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x02, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xb2, 0xbb, 0x18, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0xca,
	0xbb, 0x18, 0x0f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x48, 0x03, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xb2,
	0xbb, 0x18, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0xca, 0xbb, 0x18, 0x0f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x04, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xb2, 0xbb, 0x18, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x64, 0xca, 0xbb, 0x18, 0x10, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x25, 0xb2, 0xbb, 0x18, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0xca, 0xf3, 0x18, 0x17, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x06, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x7c, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x45, 0xb2, 0xbb, 0x18, 0x12, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xca, 0xbb,
	0x18, 0x12, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0xca, 0xf3, 0x18, 0x15, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22,
	0x20, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x3a, 0x22, 0x79, 0x65, 0x73, 0x22, 0x52, 0x07, 0x72,
	0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x52, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xb2, 0xbb, 0x18, 0x01, 0x2d, 0xca, 0xbb,
	0x18, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0xca, 0xf3, 0x18, 0x15, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x3a, 0x22, 0x79, 0x65, 0x73, 0x22, 0x48, 0x07, 0x52, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x22, 0x81, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x75, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x75, 0x74, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x84,
	0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2a, 0x28, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x09, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x6c, 0x64, 0x61, 0x70, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x73, 0x73, 0x6f, 0x10, 0x02, 0x32,
	0x85, 0x05, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x52, 0x0a, 0x0a, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0f, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0b,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x26, 0xca, 0xc1, 0x18,
	0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2f, 0x3a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x6c, 0x66, 0x12, 0x0f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0x0b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x1b, 0xca, 0xc1, 0x18, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f,
	0x62, 0x6f, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x73, 0x65, 0x6c, 0x66, 0x12, 0x43, 0x0a,
	0x08, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0b, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x19, 0xca, 0xc1, 0x18, 0x15, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x73, 0x79,
	0x6e, 0x63, 0x12, 0x41, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x6c,
	0x12, 0x0f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x1a, 0x0b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x15,
	0xca, 0xc1, 0x18, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x0f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x1a, 0x0b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x14,
	0xca, 0xc1, 0x18, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x0f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x0b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x18, 0xca, 0xc1, 0x18, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x79, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x3a, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x08, 0x50,
	0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x14, 0xd2, 0xc1, 0x18, 0x10, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x12, 0x42, 0x0a,
	0x07, 0x50, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x10, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x50, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x18, 0xda, 0xc1, 0x18, 0x14, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x3a, 0x69,
	0x64, 0x12, 0x44, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x0f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x1a, 0x0b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x18, 0xe2,
	0xc1, 0x18, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x3a, 0x69, 0x64, 0x42, 0x16, 0x5a, 0x14, 0x6a, 0x6f, 0x62, 0x6f, 0x72,
	0x2f, 0x6b, 0x69, 0x74, 0x65, 0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_proto_rawDescOnce sync.Once
	file_user_proto_rawDescData = file_user_proto_rawDesc
)

func file_user_proto_rawDescGZIP() []byte {
	file_user_proto_rawDescOnce.Do(func() {
		file_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_proto_rawDescData)
	})
	return file_user_proto_rawDescData
}

var file_user_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_user_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_user_proto_goTypes = []interface{}{
	(UserType)(0),                // 0: user.UserType
	(*UserQuery)(nil),            // 1: user.UserQuery
	(*Userinfo)(nil),             // 2: user.Userinfo
	(*UserAllResp)(nil),          // 3: user.UserAllResp
	(*UserGetByIdResp)(nil),      // 4: user.UserGetByIdResp
	(*UserPostResp)(nil),         // 5: user.UserPostResp
	(*PostUserReq)(nil),          // 6: user.PostUserReq
	(*PutUserReq)(nil),           // 7: user.PutUserReq
	(*UserPutResp)(nil),          // 8: user.UserPutResp
	(*UserPutPasswordResp)(nil),  // 9: user.UserPutPasswordResp
	(*UserPutPassResetResp)(nil), // 10: user.UserPutPassResetResp
	(*UserPutProfileResp)(nil),   // 11: user.UserPutProfileResp
	(*UserDeleteResp)(nil),       // 12: user.UserDeleteResp
	(*structpb.ListValue)(nil),   // 13: google.protobuf.ListValue
	(*base.Empty)(nil),           // 14: base.Empty
}
var file_user_proto_depIdxs = []int32{
	13, // 0: user.PutUserReq.role_ids:type_name -> google.protobuf.ListValue
	1,  // 1: user.UserService.SwitchUser:input_type -> user.UserQuery
	1,  // 2: user.UserService.GetUserSelf:input_type -> user.UserQuery
	1,  // 3: user.UserService.SyncUser:input_type -> user.UserQuery
	1,  // 4: user.UserService.GetUserAll:input_type -> user.UserQuery
	1,  // 5: user.UserService.GetUser:input_type -> user.UserQuery
	1,  // 6: user.UserService.GetUserById:input_type -> user.UserQuery
	6,  // 7: user.UserService.PostUser:input_type -> user.PostUserReq
	7,  // 8: user.UserService.PutUser:input_type -> user.PutUserReq
	1,  // 9: user.UserService.DeleteUser:input_type -> user.UserQuery
	14, // 10: user.UserService.SwitchUser:output_type -> base.Empty
	14, // 11: user.UserService.GetUserSelf:output_type -> base.Empty
	14, // 12: user.UserService.SyncUser:output_type -> base.Empty
	14, // 13: user.UserService.GetUserAll:output_type -> base.Empty
	14, // 14: user.UserService.GetUser:output_type -> base.Empty
	14, // 15: user.UserService.GetUserById:output_type -> base.Empty
	14, // 16: user.UserService.PostUser:output_type -> base.Empty
	14, // 17: user.UserService.PutUser:output_type -> base.Empty
	14, // 18: user.UserService.DeleteUser:output_type -> base.Empty
	10, // [10:19] is the sub-list for method output_type
	1,  // [1:10] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_user_proto_init() }
func file_user_proto_init() {
	if File_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Userinfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAllResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGetByIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPostResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPutResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPutPasswordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPutPassResetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPutProfileResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeleteResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_user_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_user_proto_goTypes,
		DependencyIndexes: file_user_proto_depIdxs,
		EnumInfos:         file_user_proto_enumTypes,
		MessageInfos:      file_user_proto_msgTypes,
	}.Build()
	File_user_proto = out.File
	file_user_proto_rawDesc = nil
	file_user_proto_goTypes = nil
	file_user_proto_depIdxs = nil
}
