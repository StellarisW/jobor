// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.24.2
// source: srv_rpc.proto

package pbapi

import (
	context "context"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegistryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip         string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port       int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Weight     int32  `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	Hostname   string `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Version    string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	HostGroup  string `protobuf:"bytes,6,opt,name=hostGroup,proto3" json:"hostGroup,omitempty"`
	Remark     string `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`
	RoutingKey string `protobuf:"bytes,8,opt,name=routingKey,proto3" json:"routingKey,omitempty"`
}

func (x *RegistryReq) Reset() {
	*x = RegistryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_srv_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistryReq) ProtoMessage() {}

func (x *RegistryReq) ProtoReflect() protoreflect.Message {
	mi := &file_srv_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistryReq.ProtoReflect.Descriptor instead.
func (*RegistryReq) Descriptor() ([]byte, []int) {
	return file_srv_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *RegistryReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *RegistryReq) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *RegistryReq) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *RegistryReq) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *RegistryReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RegistryReq) GetHostGroup() string {
	if x != nil {
		return x.HostGroup
	}
	return ""
}

func (x *RegistryReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *RegistryReq) GetRoutingKey() string {
	if x != nil {
		return x.RoutingKey
	}
	return ""
}

type HeartbeatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip          string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port        int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	RunningTask []string `protobuf:"bytes,3,rep,name=running_task,json=runningTask,proto3" json:"running_task,omitempty"`
}

func (x *HeartbeatReq) Reset() {
	*x = HeartbeatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_srv_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatReq) ProtoMessage() {}

func (x *HeartbeatReq) ProtoReflect() protoreflect.Message {
	mi := &file_srv_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatReq.ProtoReflect.Descriptor instead.
func (*HeartbeatReq) Descriptor() ([]byte, []int) {
	return file_srv_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *HeartbeatReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *HeartbeatReq) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *HeartbeatReq) GetRunningTask() []string {
	if x != nil {
		return x.RunningTask
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_srv_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_srv_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_srv_rpc_proto_rawDescGZIP(), []int{2}
}

var File_srv_rpc_proto protoreflect.FileDescriptor

var file_srv_rpc_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x72, 0x76, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x73, 0x72, 0x76, 0x5f, 0x72, 0x70, 0x63, 0x22, 0xd5, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68,
	0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79,
	0x22, 0x55, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x32, 0x7f, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x38, 0x0a,
	0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12,
	0x14, 0x2e, 0x73, 0x72, 0x76, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x73, 0x72, 0x76, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x15, 0x2e, 0x73, 0x72, 0x76, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x0e, 0x2e, 0x73, 0x72, 0x76, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x42, 0x17, 0x5a, 0x15, 0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2f, 0x6b, 0x69, 0x74, 0x65, 0x78,
	0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x62, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_srv_rpc_proto_rawDescOnce sync.Once
	file_srv_rpc_proto_rawDescData = file_srv_rpc_proto_rawDesc
)

func file_srv_rpc_proto_rawDescGZIP() []byte {
	file_srv_rpc_proto_rawDescOnce.Do(func() {
		file_srv_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_srv_rpc_proto_rawDescData)
	})
	return file_srv_rpc_proto_rawDescData
}

var file_srv_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_srv_rpc_proto_goTypes = []interface{}{
	(*RegistryReq)(nil),  // 0: srv_rpc.RegistryReq
	(*HeartbeatReq)(nil), // 1: srv_rpc.HeartbeatReq
	(*Empty)(nil),        // 2: srv_rpc.Empty
}
var file_srv_rpc_proto_depIdxs = []int32{
	0, // 0: srv_rpc.Heartbeat.RegistryWorker:input_type -> srv_rpc.RegistryReq
	1, // 1: srv_rpc.Heartbeat.SendHeartbeat:input_type -> srv_rpc.HeartbeatReq
	2, // 2: srv_rpc.Heartbeat.RegistryWorker:output_type -> srv_rpc.Empty
	2, // 3: srv_rpc.Heartbeat.SendHeartbeat:output_type -> srv_rpc.Empty
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_srv_rpc_proto_init() }
func file_srv_rpc_proto_init() {
	if File_srv_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_srv_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_srv_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_srv_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_srv_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_srv_rpc_proto_goTypes,
		DependencyIndexes: file_srv_rpc_proto_depIdxs,
		MessageInfos:      file_srv_rpc_proto_msgTypes,
	}.Build()
	File_srv_rpc_proto = out.File
	file_srv_rpc_proto_rawDesc = nil
	file_srv_rpc_proto_goTypes = nil
	file_srv_rpc_proto_depIdxs = nil
}

var _ context.Context

// Code generated by Kitex v0.7.0. DO NOT EDIT.

type Heartbeat interface {
	RegistryWorker(ctx context.Context, req *RegistryReq) (res *Empty, err error)
	SendHeartbeat(ctx context.Context, req *HeartbeatReq) (res *Empty, err error)
}
