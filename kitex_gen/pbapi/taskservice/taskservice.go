// Code generated by Kitex v0.7.0. DO NOT EDIT.

package taskservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	pbapi "jobor/kitex_gen/pbapi"
	task "jobor/kitex_gen/task"
)

func serviceInfo() *kitex.ServiceInfo {
	return taskServiceServiceInfo
}

var taskServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "TaskService"
	handlerType := (*pbapi.TaskService)(nil)
	methods := map[string]kitex.MethodInfo{
		"RunTask": kitex.NewMethodInfo(runTaskHandler, newRunTaskArgs, newRunTaskResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "srv_rpc",
		"ServiceFilePath": "",
	}
	extra["streaming"] = true
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.7.0",
		Extra:           extra,
	}
	return svcInfo
}

func runTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st := arg.(*streaming.Args).Stream
	stream := &taskServiceRunTaskServer{st}
	req := new(task.TaskRequest)
	if err := st.RecvMsg(req); err != nil {
		return err
	}
	return handler.(pbapi.TaskService).RunTask(req, stream)
}

type taskServiceRunTaskClient struct {
	streaming.Stream
}

func (x *taskServiceRunTaskClient) Recv() (*pbapi.StreamResponse, error) {
	m := new(pbapi.StreamResponse)
	return m, x.Stream.RecvMsg(m)
}

type taskServiceRunTaskServer struct {
	streaming.Stream
}

func (x *taskServiceRunTaskServer) Send(m *pbapi.StreamResponse) error {
	return x.Stream.SendMsg(m)
}

func newRunTaskArgs() interface{} {
	return &RunTaskArgs{}
}

func newRunTaskResult() interface{} {
	return &RunTaskResult{}
}

type RunTaskArgs struct {
	Req *task.TaskRequest
}

func (p *RunTaskArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RunTaskArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(task.TaskRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RunTaskArgs_Req_DEFAULT *task.TaskRequest

func (p *RunTaskArgs) GetReq() *task.TaskRequest {
	if !p.IsSetReq() {
		return RunTaskArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RunTaskArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RunTaskArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RunTaskResult struct {
	Success *pbapi.StreamResponse
}

var RunTaskResult_Success_DEFAULT *pbapi.StreamResponse

func (p *RunTaskResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RunTaskResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(pbapi.StreamResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RunTaskResult) GetSuccess() *pbapi.StreamResponse {
	if !p.IsSetSuccess() {
		return RunTaskResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RunTaskResult) SetSuccess(x interface{}) {
	p.Success = x.(*pbapi.StreamResponse)
}

func (p *RunTaskResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RunTaskResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RunTask(ctx context.Context, req *task.TaskRequest) (TaskService_RunTaskClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "RunTask", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &taskServiceRunTaskClient{res.Stream}
	if err := stream.Stream.SendMsg(req); err != nil {
		return nil, err
	}
	if err := stream.Stream.Close(); err != nil {
		return nil, err
	}
	return stream, nil
}
