// idl/hello/hello.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v4.23.3
// source: task.proto

package task

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "jobor/kitex_gen/api"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" query:"id" form:"id" json:"id"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" form:"name" json:"name" query:"name"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" query:"description" form:"description" json:"description"`
	Lang        string `protobuf:"bytes,4,opt,name=lang,proto3" query:"lang" form:"lang" json:"lang"`
	UserId      int64  `protobuf:"varint,7,opt,name=user_id,json=userId,proto3" query:"user_id" form:"user_id" json:"user_id"`
	User        string `protobuf:"bytes,8,opt,name=user,proto3" query:"user" form:"user" json:"user"`
	Count       int64  `protobuf:"varint,9,opt,name=count,proto3" query:"count" form:"count" json:"count"`
	Expr        string `protobuf:"bytes,10,opt,name=expr,proto3" query:"expr" form:"expr" json:"expr"`
	Timeout     int64  `protobuf:"varint,11,opt,name=timeout,proto3" query:"timeout" form:"timeout" json:"timeout"`
	RoutePolicy int32  `protobuf:"varint,12,opt,name=route_policy,json=routePolicy,proto3" query:"route_policy" form:"route_policy" json:"route_policy"`
	Deleted     *bool  `protobuf:"varint,22,opt,name=deleted,proto3,oneof" query:"deleted" json:"deleted,omitempty"`
	Page        uint64 `protobuf:"varint,111,opt,name=page,proto3" json:"page" form:"page" query:"page"`
	PageSize    uint64 `protobuf:"varint,112,opt,name=pageSize,proto3" json:"pageSize" form:"pageSize" query:"pageSize"`
}

func (x *TaskQuery) Reset() {
	*x = TaskQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskQuery) ProtoMessage() {}

func (x *TaskQuery) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskQuery.ProtoReflect.Descriptor instead.
func (*TaskQuery) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{0}
}

func (x *TaskQuery) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskQuery) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskQuery) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *TaskQuery) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TaskQuery) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *TaskQuery) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TaskQuery) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *TaskQuery) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *TaskQuery) GetRoutePolicy() int32 {
	if x != nil {
		return x.RoutePolicy
	}
	return 0
}

func (x *TaskQuery) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *TaskQuery) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *TaskQuery) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type AuthData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" query:"username" form:"username" json:"username"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" query:"password" form:"password" json:"password"`
}

func (x *AuthData) Reset() {
	*x = AuthData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthData) ProtoMessage() {}

func (x *AuthData) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthData.ProtoReflect.Descriptor instead.
func (*AuthData) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{1}
}

func (x *AuthData) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AuthData) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type KvFiled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" form:"key" json:"key" query:"key"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" query:"value" form:"value" json:"value"`
}

func (x *KvFiled) Reset() {
	*x = KvFiled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvFiled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvFiled) ProtoMessage() {}

func (x *KvFiled) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvFiled.ProtoReflect.Descriptor instead.
func (*KvFiled) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{2}
}

func (x *KvFiled) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KvFiled) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Api struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url          string            `protobuf:"bytes,35,opt,name=url,proto3" query:"url" form:"url" json:"url"`
	Method       string            `protobuf:"bytes,36,opt,name=method,proto3" form:"method" json:"method" query:"method"`
	ContentType  string            `protobuf:"bytes,37,opt,name=content_type,json=contentType,proto3" query:"content_type" form:"content_type" json:"content_type"`
	Payload      string            `protobuf:"bytes,38,opt,name=payload,proto3" query:"payload" form:"payload" json:"payload"`
	Body         string            `protobuf:"bytes,40,opt,name=body,proto3" query:"body" form:"body" json:"body"`
	AuthMethod   string            `protobuf:"bytes,41,opt,name=auth_method,json=authMethod,proto3" query:"auth_method" form:"auth_method" json:"auth_method"`
	AuthData     *AuthData         `protobuf:"bytes,42,opt,name=auth_data,json=authData,proto3" query:"auth_data" form:"auth_data" json:"auth_data"`
	HeaderList   []*KvFiled        `protobuf:"bytes,43,rep,name=header_list,json=headerList,proto3" form:"header_list" json:"header_list" query:"header_list"`
	FormDataList []*KvFiled        `protobuf:"bytes,44,rep,name=form_data_list,json=formDataList,proto3" form:"form_data_list" json:"form_data_list" query:"form_data_list"`
	WwwFormList  []*KvFiled        `protobuf:"bytes,45,rep,name=www_form_list,json=wwwFormList,proto3" form:"www_form_list" json:"www_form_list" query:"www_form_list"`
	Header       map[string]string `protobuf:"bytes,39,rep,name=header,proto3" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" query:"header" form:"header" json:"header"`
	Forms        map[string]string `protobuf:"bytes,30,rep,name=forms,proto3" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" query:"forms" form:"forms" json:"forms"`
}

func (x *Api) Reset() {
	*x = Api{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Api) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Api) ProtoMessage() {}

func (x *Api) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Api.ProtoReflect.Descriptor instead.
func (*Api) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{3}
}

func (x *Api) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Api) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Api) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *Api) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *Api) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *Api) GetAuthMethod() string {
	if x != nil {
		return x.AuthMethod
	}
	return ""
}

func (x *Api) GetAuthData() *AuthData {
	if x != nil {
		return x.AuthData
	}
	return nil
}

func (x *Api) GetHeaderList() []*KvFiled {
	if x != nil {
		return x.HeaderList
	}
	return nil
}

func (x *Api) GetFormDataList() []*KvFiled {
	if x != nil {
		return x.FormDataList
	}
	return nil
}

func (x *Api) GetWwwFormList() []*KvFiled {
	if x != nil {
		return x.WwwFormList
	}
	return nil
}

func (x *Api) GetHeader() map[string]string {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Api) GetForms() map[string]string {
	if x != nil {
		return x.Forms
	}
	return nil
}

type TaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content *string `protobuf:"bytes,32,opt,name=content,proto3,oneof" form:"content,omitempty" json:"content,omitempty" query:"content"`
	Api     *Api    `protobuf:"bytes,31,opt,name=api,proto3" query:"api" form:"api,omitempty" json:"api,omitempty"`
}

func (x *TaskData) Reset() {
	*x = TaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskData) ProtoMessage() {}

func (x *TaskData) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskData.ProtoReflect.Descriptor instead.
func (*TaskData) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{4}
}

func (x *TaskData) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *TaskData) GetApi() *Api {
	if x != nil {
		return x.Api
	}
	return nil
}

type Webhooks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebhookUrl string `protobuf:"bytes,49,opt,name=webhook_url,json=webhookUrl,proto3" query:"webhook_url" form:"webhook_url,omitempty" json:"webhook_url,omitempty"`
	Secret     string `protobuf:"bytes,50,opt,name=secret,proto3" query:"secret" form:"secret,omitempty" json:"secret,omitempty"`
}

func (x *Webhooks) Reset() {
	*x = Webhooks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Webhooks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Webhooks) ProtoMessage() {}

func (x *Webhooks) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Webhooks.ProtoReflect.Descriptor instead.
func (*Webhooks) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{5}
}

func (x *Webhooks) GetWebhookUrl() string {
	if x != nil {
		return x.WebhookUrl
	}
	return ""
}

func (x *Webhooks) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable    bool     `protobuf:"varint,41,opt,name=enable,proto3" form:"enable,omitempty" json:"enable,omitempty" query:"enable"`
	Receivers []string `protobuf:"bytes,42,rep,name=receivers,proto3" form:"receivers,omitempty" json:"receivers,omitempty" query:"receivers"` // 多个邮箱地址以逗号分割
}

func (x *Email) Reset() {
	*x = Email{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Email) ProtoMessage() {}

func (x *Email) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Email.ProtoReflect.Descriptor instead.
func (*Email) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{6}
}

func (x *Email) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Email) GetReceivers() []string {
	if x != nil {
		return x.Receivers
	}
	return nil
}

type Webhook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool     `protobuf:"varint,43,opt,name=enable,proto3" query:"enable" form:"enable,omitempty" json:"enable,omitempty"`
	Urls   []string `protobuf:"bytes,44,rep,name=urls,proto3" query:"urls" form:"urls,omitempty" json:"urls,omitempty"` // 多个api url以逗号分割
}

func (x *Webhook) Reset() {
	*x = Webhook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Webhook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Webhook) ProtoMessage() {}

func (x *Webhook) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Webhook.ProtoReflect.Descriptor instead.
func (*Webhook) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{7}
}

func (x *Webhook) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Webhook) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

// 多个飞书webhook以逗号分割
type Lark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable   bool        `protobuf:"varint,45,opt,name=enable,proto3" query:"enable" form:"enable,omitempty" json:"enable,omitempty"`
	Webhooks []*Webhooks `protobuf:"bytes,52,rep,name=webhooks,proto3" form:"webhooks,omitempty" json:"webhooks,omitempty" query:"webhooks"`
}

func (x *Lark) Reset() {
	*x = Lark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lark) ProtoMessage() {}

func (x *Lark) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lark.ProtoReflect.Descriptor instead.
func (*Lark) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{8}
}

func (x *Lark) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Lark) GetWebhooks() []*Webhooks {
	if x != nil {
		return x.Webhooks
	}
	return nil
}

// 多个钉钉webhook以逗号分割
type Dingding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable   bool        `protobuf:"varint,48,opt,name=enable,proto3" query:"enable" form:"enable,omitempty" json:"enable,omitempty"`
	Webhooks []*Webhooks `protobuf:"bytes,51,rep,name=webhooks,proto3" query:"webhooks" form:"webhooks,omitempty" json:"webhooks,omitempty"`
}

func (x *Dingding) Reset() {
	*x = Dingding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dingding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dingding) ProtoMessage() {}

func (x *Dingding) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dingding.ProtoReflect.Descriptor instead.
func (*Dingding) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{9}
}

func (x *Dingding) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Dingding) GetWebhooks() []*Webhooks {
	if x != nil {
		return x.Webhooks
	}
	return nil
}

type Notify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email    *Email    `protobuf:"bytes,1,opt,name=email,proto3" form:"email,omitempty" json:"email,omitempty" query:"email"`
	Webhook  *Webhook  `protobuf:"bytes,2,opt,name=webhook,proto3" query:"webhook" form:"webhook,omitempty" json:"webhook,omitempty"`
	Lark     *Lark     `protobuf:"bytes,3,opt,name=lark,proto3" form:"lark,omitempty" json:"lark,omitempty" query:"lark"`
	Dingding *Dingding `protobuf:"bytes,4,opt,name=dingding,proto3" form:"dingding,omitempty" json:"dingding,omitempty" query:"dingding"`
}

func (x *Notify) Reset() {
	*x = Notify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notify) ProtoMessage() {}

func (x *Notify) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notify.ProtoReflect.Descriptor instead.
func (*Notify) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{10}
}

func (x *Notify) GetEmail() *Email {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *Notify) GetWebhook() *Webhook {
	if x != nil {
		return x.Webhook
	}
	return nil
}

func (x *Notify) GetLark() *Lark {
	if x != nil {
		return x.Lark
	}
	return nil
}

func (x *Notify) GetDingding() *Dingding {
	if x != nil {
		return x.Dingding
	}
	return nil
}

type TaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64     `protobuf:"varint,1,opt,name=id,proto3" query:"id" form:"id" json:"id"`
	Name          string    `protobuf:"bytes,2,opt,name=name,proto3" form:"name" json:"name" query:"name"`
	Description   string    `protobuf:"bytes,3,opt,name=description,proto3" form:"description" json:"description" query:"description"`
	Lang          string    `protobuf:"bytes,4,opt,name=lang,proto3" query:"lang" form:"lang" json:"lang"`
	Data          *TaskData `protobuf:"bytes,5,opt,name=data,proto3" form:"data" json:"data" query:"data"`
	Notify        *Notify   `protobuf:"bytes,6,opt,name=notify,proto3" form:"notify" json:"notify" query:"notify"`
	UserId        int64     `protobuf:"varint,7,opt,name=user_id,json=userId,proto3" query:"user_id" form:"user_id" json:"user_id"`
	User          string    `protobuf:"bytes,8,opt,name=user,proto3" form:"user" json:"user" query:"user"`
	Count         int64     `protobuf:"varint,9,opt,name=count,proto3" form:"count" json:"count" query:"count"`
	Expr          string    `protobuf:"bytes,10,opt,name=expr,proto3" query:"expr" form:"expr" json:"expr"`
	Timeout       int64     `protobuf:"varint,11,opt,name=timeout,proto3" query:"timeout" form:"timeout" json:"timeout"`
	RoutePolicy   int32     `protobuf:"varint,12,opt,name=route_policy,json=routePolicy,proto3" query:"route_policy" form:"route_policy" json:"route_policy"`
	RoutingKey    string    `protobuf:"bytes,13,opt,name=routing_key,json=routingKey,proto3" query:"routing_key" form:"routing_key" json:"routing_key"`
	Status        string    `protobuf:"bytes,14,opt,name=status,proto3" form:"status" json:"status" query:"status"`
	AlarmPolicy   int32     `protobuf:"varint,15,opt,name=alarm_policy,json=alarmPolicy,proto3" form:"alarm_policy" json:"alarm_policy" query:"alarm_policy"`
	ExpectContent string    `protobuf:"bytes,16,opt,name=expect_content,json=expectContent,proto3" form:"expect_content" json:"expect_content" query:"expect_content"`
	ExpectCode    int32     `protobuf:"varint,17,opt,name=expect_code,json=expectCode,proto3" form:"expect_code" json:"expect_code" query:"expect_code"`
	Retry         int32     `protobuf:"varint,18,opt,name=retry,proto3" query:"retry" form:"retry" json:"retry"`
	Prev          string    `protobuf:"bytes,19,opt,name=prev,proto3" query:"prev" form:"prev" json:"prev"`
	Next          string    `protobuf:"bytes,20,opt,name=next,proto3" form:"next" json:"next" query:"next"`
	Updater       string    `protobuf:"bytes,21,opt,name=updater,proto3" form:"updater" json:"updater" query:"updater"`
	CreatedAt     string    `protobuf:"bytes,110,opt,name=created_at,json=createdAt,proto3" form:"created_at" json:"created_at" query:"created_at"`
	UpdatedAt     string    `protobuf:"bytes,120,opt,name=updated_at,json=updatedAt,proto3" form:"updated_at" json:"updated_at" query:"updated_at"`
}

func (x *TaskResp) Reset() {
	*x = TaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResp) ProtoMessage() {}

func (x *TaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResp.ProtoReflect.Descriptor instead.
func (*TaskResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{11}
}

func (x *TaskResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskResp) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskResp) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *TaskResp) GetData() *TaskData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TaskResp) GetNotify() *Notify {
	if x != nil {
		return x.Notify
	}
	return nil
}

func (x *TaskResp) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TaskResp) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *TaskResp) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TaskResp) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *TaskResp) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *TaskResp) GetRoutePolicy() int32 {
	if x != nil {
		return x.RoutePolicy
	}
	return 0
}

func (x *TaskResp) GetRoutingKey() string {
	if x != nil {
		return x.RoutingKey
	}
	return ""
}

func (x *TaskResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TaskResp) GetAlarmPolicy() int32 {
	if x != nil {
		return x.AlarmPolicy
	}
	return 0
}

func (x *TaskResp) GetExpectContent() string {
	if x != nil {
		return x.ExpectContent
	}
	return ""
}

func (x *TaskResp) GetExpectCode() int32 {
	if x != nil {
		return x.ExpectCode
	}
	return 0
}

func (x *TaskResp) GetRetry() int32 {
	if x != nil {
		return x.Retry
	}
	return 0
}

func (x *TaskResp) GetPrev() string {
	if x != nil {
		return x.Prev
	}
	return ""
}

func (x *TaskResp) GetNext() string {
	if x != nil {
		return x.Next
	}
	return ""
}

func (x *TaskResp) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *TaskResp) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TaskResp) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type TaskAllResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" query:"id" form:"id" json:"id"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" form:"name" json:"name" query:"name"`
}

func (x *TaskAllResp) Reset() {
	*x = TaskAllResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskAllResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAllResp) ProtoMessage() {}

func (x *TaskAllResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAllResp.ProtoReflect.Descriptor instead.
func (*TaskAllResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{12}
}

func (x *TaskAllResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskAllResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TaskGetByIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id" query:"id"`
	Name          string    `protobuf:"bytes,2,opt,name=name,proto3" form:"name" json:"name" query:"name"`
	Description   string    `protobuf:"bytes,3,opt,name=description,proto3" form:"description" json:"description" query:"description"`
	Lang          string    `protobuf:"bytes,4,opt,name=lang,proto3" form:"lang" json:"lang" query:"lang"`
	Data          *TaskData `protobuf:"bytes,5,opt,name=data,proto3" query:"data" form:"data" json:"data"`
	Notify        *Notify   `protobuf:"bytes,6,opt,name=notify,proto3" query:"notify" form:"notify" json:"notify"`
	UserId        int64     `protobuf:"varint,7,opt,name=user_id,json=userId,proto3" form:"user_id" json:"user_id" query:"user_id"`
	User          string    `protobuf:"bytes,8,opt,name=user,proto3" form:"user" json:"user" query:"user"`
	Count         int64     `protobuf:"varint,9,opt,name=count,proto3" form:"count" json:"count" query:"count"`
	Expr          string    `protobuf:"bytes,10,opt,name=expr,proto3" form:"expr" json:"expr" query:"expr"`
	Timeout       int64     `protobuf:"varint,11,opt,name=timeout,proto3" query:"timeout" form:"timeout" json:"timeout"`
	RoutePolicy   int32     `protobuf:"varint,12,opt,name=route_policy,json=routePolicy,proto3" query:"route_policy" form:"route_policy" json:"route_policy"`
	RoutingKey    string    `protobuf:"bytes,13,opt,name=routing_key,json=routingKey,proto3" form:"routing_key" json:"routing_key" query:"routing_key"`
	Status        string    `protobuf:"bytes,14,opt,name=status,proto3" form:"status" json:"status" query:"status"`
	AlarmPolicy   int32     `protobuf:"varint,15,opt,name=alarm_policy,json=alarmPolicy,proto3" query:"alarm_policy" form:"alarm_policy" json:"alarm_policy"`
	ExpectContent string    `protobuf:"bytes,16,opt,name=expect_content,json=expectContent,proto3" query:"expect_content" form:"expect_content" json:"expect_content"`
	ExpectCode    int32     `protobuf:"varint,17,opt,name=expect_code,json=expectCode,proto3" query:"expect_code" form:"expect_code" json:"expect_code"`
	Retry         int32     `protobuf:"varint,18,opt,name=retry,proto3" query:"retry" form:"retry" json:"retry"`
	Prev          string    `protobuf:"bytes,19,opt,name=prev,proto3" form:"prev" json:"prev" query:"prev"`
	Next          string    `protobuf:"bytes,20,opt,name=next,proto3" query:"next" form:"next" json:"next"`
	Updater       string    `protobuf:"bytes,21,opt,name=updater,proto3" query:"updater" form:"updater" json:"updater"`
	Deleted       bool      `protobuf:"varint,22,opt,name=deleted,proto3" query:"deleted" json:"deleted,omitempty"`
	CreatedAt     string    `protobuf:"bytes,110,opt,name=created_at,json=createdAt,proto3" query:"created_at" form:"created_at" json:"created_at"`
	UpdatedAt     string    `protobuf:"bytes,120,opt,name=updated_at,json=updatedAt,proto3" query:"updated_at" form:"updated_at" json:"updated_at"`
}

func (x *TaskGetByIdResp) Reset() {
	*x = TaskGetByIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskGetByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskGetByIdResp) ProtoMessage() {}

func (x *TaskGetByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskGetByIdResp.ProtoReflect.Descriptor instead.
func (*TaskGetByIdResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{13}
}

func (x *TaskGetByIdResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskGetByIdResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskGetByIdResp) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskGetByIdResp) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *TaskGetByIdResp) GetData() *TaskData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TaskGetByIdResp) GetNotify() *Notify {
	if x != nil {
		return x.Notify
	}
	return nil
}

func (x *TaskGetByIdResp) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TaskGetByIdResp) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *TaskGetByIdResp) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TaskGetByIdResp) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *TaskGetByIdResp) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *TaskGetByIdResp) GetRoutePolicy() int32 {
	if x != nil {
		return x.RoutePolicy
	}
	return 0
}

func (x *TaskGetByIdResp) GetRoutingKey() string {
	if x != nil {
		return x.RoutingKey
	}
	return ""
}

func (x *TaskGetByIdResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TaskGetByIdResp) GetAlarmPolicy() int32 {
	if x != nil {
		return x.AlarmPolicy
	}
	return 0
}

func (x *TaskGetByIdResp) GetExpectContent() string {
	if x != nil {
		return x.ExpectContent
	}
	return ""
}

func (x *TaskGetByIdResp) GetExpectCode() int32 {
	if x != nil {
		return x.ExpectCode
	}
	return 0
}

func (x *TaskGetByIdResp) GetRetry() int32 {
	if x != nil {
		return x.Retry
	}
	return 0
}

func (x *TaskGetByIdResp) GetPrev() string {
	if x != nil {
		return x.Prev
	}
	return ""
}

func (x *TaskGetByIdResp) GetNext() string {
	if x != nil {
		return x.Next
	}
	return ""
}

func (x *TaskGetByIdResp) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *TaskGetByIdResp) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *TaskGetByIdResp) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TaskGetByIdResp) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type PostTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string    `protobuf:"bytes,2,opt,name=name,proto3" query:"name" form:"name" json:"name"`
	Description   string    `protobuf:"bytes,3,opt,name=description,proto3" form:"description" json:"description" query:"description"`
	Lang          string    `protobuf:"bytes,4,opt,name=lang,proto3" query:"lang" form:"lang" json:"lang"`
	Data          *TaskData `protobuf:"bytes,5,opt,name=data,proto3" form:"data" json:"data" query:"data"`
	Notify        *Notify   `protobuf:"bytes,6,opt,name=notify,proto3" form:"notify" json:"notify" query:"notify"`
	UserId        int64     `protobuf:"varint,7,opt,name=user_id,json=userId,proto3" query:"user_id" form:"user_id" json:"user_id"`
	User          string    `protobuf:"bytes,8,opt,name=user,proto3" query:"user" form:"user" json:"user"`
	Count         int64     `protobuf:"varint,9,opt,name=count,proto3" form:"count" json:"count" query:"count"`
	Expr          string    `protobuf:"bytes,10,opt,name=expr,proto3" form:"expr" json:"expr" query:"expr"`
	Timeout       int64     `protobuf:"varint,11,opt,name=timeout,proto3" query:"timeout" form:"timeout" json:"timeout"`
	RoutePolicy   int32     `protobuf:"varint,12,opt,name=route_policy,json=routePolicy,proto3" form:"route_policy" json:"route_policy" query:"route_policy"`
	RoutingKey    string    `protobuf:"bytes,13,opt,name=routing_key,json=routingKey,proto3" query:"routing_key" form:"routing_key" json:"routing_key"`
	Status        string    `protobuf:"bytes,14,opt,name=status,proto3" query:"status" form:"status" json:"status"`
	AlarmPolicy   int32     `protobuf:"varint,15,opt,name=alarm_policy,json=alarmPolicy,proto3" query:"alarm_policy" form:"alarm_policy" json:"alarm_policy"`
	ExpectContent string    `protobuf:"bytes,16,opt,name=expect_content,json=expectContent,proto3" query:"expect_content" form:"expect_content" json:"expect_content"`
	ExpectCode    int32     `protobuf:"varint,17,opt,name=expect_code,json=expectCode,proto3" query:"expect_code" form:"expect_code" json:"expect_code"`
	Retry         int32     `protobuf:"varint,18,opt,name=retry,proto3" query:"retry" form:"retry" json:"retry"`
	Prev          *string   `protobuf:"bytes,19,opt,name=prev,proto3,oneof" query:"prev" form:"prev,omitempty" json:"prev,omitempty"`
	Next          *string   `protobuf:"bytes,20,opt,name=next,proto3,oneof" query:"next" form:"next,omitempty" json:"next,omitempty"`
	Updater       string    `protobuf:"bytes,21,opt,name=updater,proto3" form:"updater,omitempty" json:"updater,omitempty" query:"updater"`
	Deleted       bool      `protobuf:"varint,22,opt,name=deleted,proto3" query:"deleted" json:"deleted"`
}

func (x *PostTaskReq) Reset() {
	*x = PostTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostTaskReq) ProtoMessage() {}

func (x *PostTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostTaskReq.ProtoReflect.Descriptor instead.
func (*PostTaskReq) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{14}
}

func (x *PostTaskReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PostTaskReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PostTaskReq) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *PostTaskReq) GetData() *TaskData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PostTaskReq) GetNotify() *Notify {
	if x != nil {
		return x.Notify
	}
	return nil
}

func (x *PostTaskReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PostTaskReq) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *PostTaskReq) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PostTaskReq) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *PostTaskReq) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *PostTaskReq) GetRoutePolicy() int32 {
	if x != nil {
		return x.RoutePolicy
	}
	return 0
}

func (x *PostTaskReq) GetRoutingKey() string {
	if x != nil {
		return x.RoutingKey
	}
	return ""
}

func (x *PostTaskReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PostTaskReq) GetAlarmPolicy() int32 {
	if x != nil {
		return x.AlarmPolicy
	}
	return 0
}

func (x *PostTaskReq) GetExpectContent() string {
	if x != nil {
		return x.ExpectContent
	}
	return ""
}

func (x *PostTaskReq) GetExpectCode() int32 {
	if x != nil {
		return x.ExpectCode
	}
	return 0
}

func (x *PostTaskReq) GetRetry() int32 {
	if x != nil {
		return x.Retry
	}
	return 0
}

func (x *PostTaskReq) GetPrev() string {
	if x != nil && x.Prev != nil {
		return *x.Prev
	}
	return ""
}

func (x *PostTaskReq) GetNext() string {
	if x != nil && x.Next != nil {
		return *x.Next
	}
	return ""
}

func (x *PostTaskReq) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *PostTaskReq) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

type PutTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          *string   `protobuf:"bytes,2,opt,name=name,proto3,oneof" query:"name" form:"name,omitempty" json:"name,omitempty"`
	Description   *string   `protobuf:"bytes,3,opt,name=description,proto3,oneof" query:"description" form:"description,omitempty" json:"description,omitempty"`
	Lang          *string   `protobuf:"bytes,4,opt,name=lang,proto3,oneof" form:"lang,omitempty" json:"lang,omitempty" query:"lang"`
	Data          *TaskData `protobuf:"bytes,5,opt,name=data,proto3" form:"data,omitempty" json:"data,omitempty" query:"data" to_str:"yes"`
	Notify        *Notify   `protobuf:"bytes,6,opt,name=notify,proto3" query:"notify" form:"notify,omitempty" json:"notify,omitempty" to_str:"yes"`
	UserId        *int64    `protobuf:"varint,7,opt,name=user_id,json=userId,proto3,oneof" query:"user_id" json:"user_id,omitempty"`
	User          *string   `protobuf:"bytes,8,opt,name=user,proto3,oneof" query:"user" form:"user,omitempty" json:"user,omitempty"`
	Count         *int64    `protobuf:"varint,9,opt,name=count,proto3,oneof" query:"count" json:"count,omitempty"`
	Expr          *string   `protobuf:"bytes,10,opt,name=expr,proto3,oneof" form:"expr,omitempty" json:"expr,omitempty" query:"expr"`
	Timeout       *int64    `protobuf:"varint,11,opt,name=timeout,proto3,oneof" query:"timeout" json:"timeout,omitempty"`
	RoutePolicy   *int32    `protobuf:"varint,12,opt,name=route_policy,json=routePolicy,proto3,oneof" query:"route_policy" json:"route_policy,omitempty"`
	RoutingKey    *string   `protobuf:"bytes,13,opt,name=routing_key,json=routingKey,proto3,oneof" form:"routing_key,omitempty" json:"routing_key,omitempty" query:"routing_key"`
	Status        *string   `protobuf:"bytes,14,opt,name=status,proto3,oneof" form:"status,omitempty" json:"status,omitempty" query:"status"`
	AlarmPolicy   *int32    `protobuf:"varint,15,opt,name=alarm_policy,json=alarmPolicy,proto3,oneof" query:"alarm_policy" json:"alarm_policy,omitempty"`
	ExpectContent *string   `protobuf:"bytes,16,opt,name=expect_content,json=expectContent,proto3,oneof" query:"expect_content" form:"expect_content,omitempty" json:"expect_content,omitempty"`
	ExpectCode    *int32    `protobuf:"varint,17,opt,name=expect_code,json=expectCode,proto3,oneof" query:"expect_code" json:"expect_code,omitempty"`
	Retry         *int32    `protobuf:"varint,18,opt,name=retry,proto3,oneof" query:"retry" json:"retry,omitempty"`
	Prev          *string   `protobuf:"bytes,19,opt,name=prev,proto3,oneof" query:"prev" form:"prev,omitempty" json:"prev,omitempty"`
	Next          *string   `protobuf:"bytes,20,opt,name=next,proto3,oneof" form:"next,omitempty" json:"next,omitempty" query:"next"`
	Updater       *string   `protobuf:"bytes,21,opt,name=updater,proto3,oneof" query:"updater" form:"updater,omitempty" json:"updater,omitempty"`
	Deleted       *bool     `protobuf:"varint,22,opt,name=deleted,proto3,oneof" query:"deleted" json:"deleted,omitempty"`
}

func (x *PutTaskReq) Reset() {
	*x = PutTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutTaskReq) ProtoMessage() {}

func (x *PutTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutTaskReq.ProtoReflect.Descriptor instead.
func (*PutTaskReq) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{15}
}

func (x *PutTaskReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PutTaskReq) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *PutTaskReq) GetLang() string {
	if x != nil && x.Lang != nil {
		return *x.Lang
	}
	return ""
}

func (x *PutTaskReq) GetData() *TaskData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PutTaskReq) GetNotify() *Notify {
	if x != nil {
		return x.Notify
	}
	return nil
}

func (x *PutTaskReq) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *PutTaskReq) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *PutTaskReq) GetCount() int64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *PutTaskReq) GetExpr() string {
	if x != nil && x.Expr != nil {
		return *x.Expr
	}
	return ""
}

func (x *PutTaskReq) GetTimeout() int64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

func (x *PutTaskReq) GetRoutePolicy() int32 {
	if x != nil && x.RoutePolicy != nil {
		return *x.RoutePolicy
	}
	return 0
}

func (x *PutTaskReq) GetRoutingKey() string {
	if x != nil && x.RoutingKey != nil {
		return *x.RoutingKey
	}
	return ""
}

func (x *PutTaskReq) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *PutTaskReq) GetAlarmPolicy() int32 {
	if x != nil && x.AlarmPolicy != nil {
		return *x.AlarmPolicy
	}
	return 0
}

func (x *PutTaskReq) GetExpectContent() string {
	if x != nil && x.ExpectContent != nil {
		return *x.ExpectContent
	}
	return ""
}

func (x *PutTaskReq) GetExpectCode() int32 {
	if x != nil && x.ExpectCode != nil {
		return *x.ExpectCode
	}
	return 0
}

func (x *PutTaskReq) GetRetry() int32 {
	if x != nil && x.Retry != nil {
		return *x.Retry
	}
	return 0
}

func (x *PutTaskReq) GetPrev() string {
	if x != nil && x.Prev != nil {
		return *x.Prev
	}
	return ""
}

func (x *PutTaskReq) GetNext() string {
	if x != nil && x.Next != nil {
		return *x.Next
	}
	return ""
}

func (x *PutTaskReq) GetUpdater() string {
	if x != nil && x.Updater != nil {
		return *x.Updater
	}
	return ""
}

func (x *PutTaskReq) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

var File_task_proto protoreflect.FileDescriptor

var file_task_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x1a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x04,
	0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0c, 0xb2, 0xbb, 0x18, 0x02, 0x69, 0x64, 0xca,
	0xbb, 0x18, 0x02, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0xca, 0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x40, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xb2, 0xbb, 0x18, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xbb, 0x18, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0xb2, 0xbb, 0x18, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0xca, 0xbb, 0x18, 0x04, 0x6c, 0x61, 0x6e,
	0x67, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x16, 0xb2, 0xbb, 0x18, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0xca, 0xbb, 0x18, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x75, 0x73, 0x65, 0x72,
	0xca, 0xbb, 0x18, 0x04, 0x75, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x12, 0xb2,
	0xbb, 0x18, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xca, 0xbb, 0x18, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x65, 0x78, 0x70, 0x72,
	0xca, 0xbb, 0x18, 0x04, 0x65, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x30,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x16, 0xb2, 0xbb, 0x18, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0xca, 0xbb, 0x18, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x43, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x20, 0xb2, 0xbb, 0x18, 0x0c, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0xca, 0xbb, 0x18, 0x0c, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x46, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x42, 0x27, 0xb2, 0xbb, 0x18, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0xca, 0xf3, 0x18, 0x18, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48,
	0x00, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x70, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x76, 0x0a, 0x08, 0x41, 0x75, 0x74,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xbb, 0x18, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2,
	0xbb, 0x18, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0xca, 0xbb, 0x18, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0x55, 0x0a, 0x07, 0x4b, 0x76, 0x46, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xbb, 0x18, 0x03, 0x6b,
	0x65, 0x79, 0xca, 0xbb, 0x18, 0x03, 0x6b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xb2,
	0xbb, 0x18, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0xca, 0xbb, 0x18, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf8, 0x06, 0x0a, 0x03, 0x41, 0x70, 0x69,
	0x12, 0x20, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2,
	0xbb, 0x18, 0x03, 0x75, 0x72, 0x6c, 0xca, 0xbb, 0x18, 0x03, 0x75, 0x72, 0x6c, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0xb2, 0xbb, 0x18, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0xca, 0xbb,
	0x18, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x43, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xb2, 0xbb, 0x18, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xca, 0xbb, 0x18, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xbb, 0x18, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0xca, 0xbb, 0x18, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x62, 0x6f, 0x64, 0x79, 0xca,
	0xbb, 0x18, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x3f, 0x0a,
	0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1e, 0xb2, 0xbb, 0x18, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0xca, 0xbb, 0x18, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x47,
	0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x1a, 0xb2, 0xbb, 0x18, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0xca, 0xbb, 0x18, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x4b, 0x76, 0x46, 0x69, 0x6c, 0x65, 0x64, 0x42, 0x1e, 0xb2, 0xbb, 0x18,
	0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0xca, 0xbb, 0x18, 0x0b,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4b, 0x76, 0x46, 0x69, 0x6c, 0x65, 0x64, 0x42, 0x24,
	0xb2, 0xbb, 0x18, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0xca, 0xbb, 0x18, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x55, 0x0a, 0x0d, 0x77, 0x77, 0x77, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x4b, 0x76, 0x46, 0x69, 0x6c, 0x65, 0x64, 0x42, 0x22, 0xb2, 0xbb, 0x18, 0x0d, 0x77, 0x77,
	0x77, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0xca, 0xbb, 0x18, 0x0d, 0x77,
	0x77, 0x77, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x77, 0x77,
	0x77, 0x46, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x41, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x14, 0xb2, 0xbb, 0x18, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0xca, 0xbb, 0x18, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3e,
	0x0a, 0x05, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x12, 0xb2, 0xbb, 0x18, 0x05, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0xca, 0xbb,
	0x18, 0x05, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x1a, 0x39,
	0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x46, 0x6f, 0x72,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x8e, 0x01, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0xb2, 0xbb, 0x18, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0xca, 0xbb,
	0x18, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x35, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x41, 0x70, 0x69, 0x42, 0x18, 0xb2, 0xbb, 0x18, 0x03, 0x61,
	0x70, 0x69, 0xca, 0xbb, 0x18, 0x0d, 0x61, 0x70, 0x69, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x03, 0x61, 0x70, 0x69, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x08, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x73, 0x12, 0x49, 0x0a, 0x0b, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xb2, 0xbb, 0x18, 0x0b, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0xca, 0xbb, 0x18, 0x15, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x0a, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x36, 0x0a, 0x06,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xb2, 0xbb,
	0x18, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0xca, 0xbb, 0x18, 0x10, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x06, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x36,
	0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1e,
	0xb2, 0xbb, 0x18, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0xca, 0xbb, 0x18, 0x10, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x09, 0x42, 0x24, 0xb2, 0xbb, 0x18, 0x09, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0xca, 0xbb, 0x18, 0x13, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x22, 0x71, 0x0a, 0x07, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x36, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1e, 0xb2, 0xbb, 0x18, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0xca, 0xbb, 0x18, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xbb, 0x18,
	0x04, 0x75, 0x72, 0x6c, 0x73, 0xca, 0xbb, 0x18, 0x0e, 0x75, 0x72, 0x6c, 0x73, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x22, 0x8e, 0x01,
	0x0a, 0x04, 0x6c, 0x61, 0x72, 0x6b, 0x12, 0x36, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1e, 0xb2, 0xbb, 0x18, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0xca, 0xbb, 0x18, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4e,
	0x0a, 0x08, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x34, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73,
	0x42, 0x22, 0xb2, 0xbb, 0x18, 0x08, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0xca, 0xbb,
	0x18, 0x12, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x08, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x22, 0x92,
	0x01, 0x0a, 0x08, 0x64, 0x69, 0x6e, 0x67, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1e, 0xb2, 0xbb, 0x18,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0xca, 0xbb, 0x18, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x08, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18,
	0x33, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x42, 0x22, 0xb2, 0xbb, 0x18, 0x08, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x73, 0xca, 0xbb, 0x18, 0x12, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x08, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x73, 0x22, 0xa0, 0x02, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x3f,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x1c, 0xb2, 0xbb, 0x18, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0xca, 0xbb, 0x18, 0x0f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x49, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x42,
	0x20, 0xb2, 0xbb, 0x18, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0xca, 0xbb, 0x18, 0x11,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x61,
	0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x6c, 0x61, 0x72, 0x6b, 0x42, 0x1a, 0xb2, 0xbb, 0x18, 0x04, 0x6c, 0x61, 0x72, 0x6b, 0xca, 0xbb,
	0x18, 0x0e, 0x6c, 0x61, 0x72, 0x6b, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x04, 0x6c, 0x61, 0x72, 0x6b, 0x12, 0x4e, 0x0a, 0x08, 0x64, 0x69, 0x6e, 0x67, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x64, 0x69, 0x6e, 0x67, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x22, 0xb2, 0xbb, 0x18, 0x08, 0x64, 0x69,
	0x6e, 0x67, 0x64, 0x69, 0x6e, 0x67, 0xca, 0xbb, 0x18, 0x12, 0x64, 0x69, 0x6e, 0x67, 0x64, 0x69,
	0x6e, 0x67, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x08, 0x64, 0x69,
	0x6e, 0x67, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xaa, 0x09, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x0c, 0xb2, 0xbb, 0x18, 0x02, 0x69, 0x64, 0xca, 0xbb, 0x18, 0x02, 0x69, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0xb2, 0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xb2, 0xbb,
	0x18, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xbb, 0x18,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x61, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x6c, 0x61, 0x6e,
	0x67, 0xca, 0xbb, 0x18, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12,
	0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x42, 0x10, 0xb2,
	0xbb, 0x18, 0x04, 0x64, 0x61, 0x74, 0x61, 0xca, 0xbb, 0x18, 0x04, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x42, 0x14, 0xb2, 0xbb, 0x18, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0xca,
	0xbb, 0x18, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x2f, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x16, 0xb2, 0xbb, 0x18, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xca,
	0xbb, 0x18, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x75, 0x73, 0x65, 0x72, 0xca, 0xbb, 0x18, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x12, 0xb2, 0xbb, 0x18, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0xca, 0xbb, 0x18, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x65, 0x78, 0x70, 0x72, 0xca, 0xbb, 0x18, 0x04, 0x65, 0x78,
	0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x42, 0x16, 0xb2, 0xbb, 0x18, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0xca, 0xbb, 0x18, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x20, 0xb2, 0xbb, 0x18, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0xca, 0xbb, 0x18, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x3f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xb2, 0xbb, 0x18, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x6b, 0x65, 0x79, 0xca, 0xbb, 0x18, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x6b, 0x65, 0x79, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79,
	0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x14, 0xb2, 0xbb, 0x18, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xca, 0xbb, 0x18, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43,
	0x0a, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x20, 0xb2, 0xbb, 0x18, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0xca, 0xbb, 0x18, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x4b, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xb2, 0xbb, 0x18,
	0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0xca,
	0xbb, 0x18, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x3f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1e, 0xb2, 0xbb, 0x18, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0xca, 0xbb, 0x18, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x28, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x12, 0xb2, 0xbb, 0x18, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0xca, 0xbb, 0x18, 0x05, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x04, 0x70,
	0x72, 0x65, 0x76, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x70,
	0x72, 0x65, 0x76, 0xca, 0xbb, 0x18, 0x04, 0x70, 0x72, 0x65, 0x76, 0x52, 0x04, 0x70, 0x72, 0x65,
	0x76, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0xb2, 0xbb, 0x18, 0x04, 0x6e, 0x65, 0x78, 0x74, 0xca, 0xbb, 0x18, 0x04, 0x6e, 0x65, 0x78,
	0x74, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xbb, 0x18, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x72, 0xca, 0xbb, 0x18, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xb2,
	0xbb, 0x18, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0xca, 0xbb, 0x18,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xb2, 0xbb, 0x18, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0xca, 0xbb, 0x18, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x51, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0c,
	0xb2, 0xbb, 0x18, 0x02, 0x69, 0x64, 0xca, 0xbb, 0x18, 0x02, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xb2, 0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xee, 0x09, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x47,
	0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xb2, 0xbb, 0x18, 0x02, 0x69, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xb2,
	0xbb, 0x18, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xbb,
	0x18, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0xca, 0xbb, 0x18, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x42, 0x10,
	0xb2, 0xbb, 0x18, 0x04, 0x64, 0x61, 0x74, 0x61, 0xca, 0xbb, 0x18, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x42, 0x14, 0xb2, 0xbb, 0x18, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0xca, 0xbb, 0x18, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x2f, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x16, 0xb2, 0xbb, 0x18, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0xca, 0xbb, 0x18, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x75, 0x73, 0x65, 0x72, 0xca, 0xbb, 0x18, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x12, 0xb2, 0xbb, 0x18, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0xca, 0xbb, 0x18, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x65, 0x78, 0x70, 0x72, 0xca, 0xbb, 0x18, 0x04, 0x65,
	0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x42, 0x16, 0xb2, 0xbb, 0x18, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0xca, 0xbb, 0x18, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x20, 0xb2, 0xbb, 0x18, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0xca, 0xbb, 0x18, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xb2, 0xbb, 0x18, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0xca, 0xbb, 0x18, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x6b, 0x65, 0x79, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0xb2, 0xbb, 0x18, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xca, 0xbb, 0x18,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x43, 0x0a, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x42, 0x20, 0xb2, 0xbb, 0x18, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0xca, 0xbb, 0x18, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x4b, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xb2, 0xbb,
	0x18, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0xca, 0xbb, 0x18, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1e, 0xb2, 0xbb, 0x18, 0x0b, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0xca, 0xbb, 0x18, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x12, 0xb2, 0xbb, 0x18, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0xca, 0xbb, 0x18, 0x05,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x04,
	0x70, 0x72, 0x65, 0x76, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04,
	0x70, 0x72, 0x65, 0x76, 0xca, 0xbb, 0x18, 0x04, 0x70, 0x72, 0x65, 0x76, 0x52, 0x04, 0x70, 0x72,
	0x65, 0x76, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x6e, 0x65, 0x78, 0x74, 0xca, 0xbb, 0x18, 0x04, 0x6e, 0x65,
	0x78, 0x74, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xbb, 0x18, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0xca, 0xbb, 0x18, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x07, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x42, 0x27, 0xb2, 0xbb, 0x18,
	0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0xca, 0xf3, 0x18, 0x18, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1c, 0xb2, 0xbb, 0x18, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0xca, 0xbb, 0x18, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c,
	0xb2, 0xbb, 0x18, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0xca, 0xbb,
	0x18, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x88, 0x09, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xca,
	0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1e, 0xb2, 0xbb, 0x18, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0xca, 0xbb, 0x18, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2,
	0xbb, 0x18, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0xca, 0xbb, 0x18, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x52,
	0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x64, 0x61, 0x74, 0x61, 0xca, 0xbb, 0x18,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x06, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x42, 0x14, 0xb2, 0xbb, 0x18, 0x06, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0xca, 0xbb, 0x18, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52,
	0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2f, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x16, 0xb2, 0xbb, 0x18, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0xca, 0xbb, 0x18, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x75, 0x73, 0x65, 0x72,
	0xca, 0xbb, 0x18, 0x04, 0x75, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x12, 0xb2,
	0xbb, 0x18, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xca, 0xbb, 0x18, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xbb, 0x18, 0x04, 0x65, 0x78, 0x70, 0x72,
	0xca, 0xbb, 0x18, 0x04, 0x65, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x30,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x16, 0xb2, 0xbb, 0x18, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0xca, 0xbb, 0x18, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x43, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x20, 0xb2, 0xbb, 0x18, 0x0c, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0xca, 0xbb, 0x18, 0x0c, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xb2, 0xbb, 0x18, 0x0b,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0xca, 0xbb, 0x18, 0x0b, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xbb, 0x18, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0xca, 0xbb, 0x18, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x42, 0x20, 0xb2, 0xbb, 0x18, 0x0c,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0xca, 0xbb, 0x18, 0x0c,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4b, 0x0a, 0x0e, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0xb2, 0xbb, 0x18, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0xca, 0xbb, 0x18, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1e, 0xb2, 0xbb, 0x18,
	0x0b, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0xca, 0xbb, 0x18, 0x0b,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x42, 0x12, 0xb2, 0xbb, 0x18, 0x05, 0x72, 0x65, 0x74, 0x72,
	0x79, 0xca, 0xbb, 0x18, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x12, 0x33, 0x0a, 0x04, 0x70, 0x72, 0x65, 0x76, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1a, 0xb2, 0xbb, 0x18, 0x04, 0x70, 0x72, 0x65, 0x76, 0xca, 0xbb, 0x18, 0x0e, 0x70, 0x72, 0x65,
	0x76, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x04, 0x70,
	0x72, 0x65, 0x76, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xbb, 0x18, 0x04, 0x6e, 0x65, 0x78, 0x74, 0xca, 0xbb,
	0x18, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x48, 0x01, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xb2, 0xbb,
	0x18, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0xca, 0xbb, 0x18, 0x11, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1d, 0xb2, 0xbb, 0x18, 0x07, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0xca, 0xf3, 0x18, 0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x22, 0xb9, 0x0d, 0x0a, 0x0a, 0x50, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1a, 0xb2, 0xbb, 0x18, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xca, 0xbb, 0x18, 0x0e, 0x6e, 0x61, 0x6d,
	0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xb2, 0xbb, 0x18,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xbb, 0x18, 0x15,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xbb, 0x18, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0xca,
	0xbb, 0x18, 0x0e, 0x6c, 0x61, 0x6e, 0x67, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x48, 0x02, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x42, 0x2a, 0xb2, 0xbb, 0x18, 0x04,
	0x64, 0x61, 0x74, 0x61, 0xca, 0xbb, 0x18, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xca, 0xf3, 0x18, 0x0c, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72,
	0x3a, 0x22, 0x79, 0x65, 0x73, 0x22, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x06,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x42, 0x2e, 0xb2, 0xbb, 0x18, 0x06,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0xca, 0xbb, 0x18, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xca, 0xf3, 0x18, 0x0c, 0x74, 0x6f,
	0x5f, 0x73, 0x74, 0x72, 0x3a, 0x22, 0x79, 0x65, 0x73, 0x22, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x45, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x27, 0xb2, 0xbb, 0x18, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0xca, 0xf3, 0x18, 0x18, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xbb, 0x18, 0x04, 0x75, 0x73, 0x65,
	0x72, 0xca, 0xbb, 0x18, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x04, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3e,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x23, 0xb2,
	0xbb, 0x18, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xca, 0xf3, 0x18, 0x16, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x48, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xbb,
	0x18, 0x04, 0x65, 0x78, 0x70, 0x72, 0xca, 0xbb, 0x18, 0x0e, 0x65, 0x78, 0x70, 0x72, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x06, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x27, 0xb2, 0xbb, 0x18, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0xca, 0xf3, 0x18, 0x18, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x07, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x0c, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x31, 0xb2, 0xbb, 0x18, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0xca, 0xf3, 0x18, 0x1d, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x48, 0x08, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xb2, 0xbb, 0x18,
	0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0xca, 0xbb, 0x18, 0x15,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xb2, 0xbb, 0x18, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0xca, 0xbb, 0x18, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x0a, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x42, 0x31, 0xb2, 0xbb, 0x18, 0x0c, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0xca, 0xf3, 0x18, 0x1d, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x0b, 0x52, 0x0b,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x5a,
	0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xb2, 0xbb, 0x18, 0x0e, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0xca, 0xbb, 0x18, 0x18, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x0c, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x2f, 0xb2, 0xbb, 0x18, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0xca, 0xf3, 0x18, 0x1c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x48, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x3e, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x23, 0xb2, 0xbb, 0x18, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0xca, 0xf3, 0x18, 0x16, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x74, 0x72, 0x79, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x0e, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x04, 0x70, 0x72, 0x65, 0x76, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1a, 0xb2, 0xbb, 0x18, 0x04, 0x70, 0x72, 0x65, 0x76, 0xca, 0xbb, 0x18, 0x0e, 0x70, 0x72, 0x65,
	0x76, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x0f, 0x52, 0x04, 0x70,
	0x72, 0x65, 0x76, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xbb, 0x18, 0x04, 0x6e, 0x65, 0x78, 0x74, 0xca, 0xbb,
	0x18, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x48, 0x10, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xb2, 0xbb,
	0x18, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0xca, 0xbb, 0x18, 0x11, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x11,
	0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x07,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x42, 0x27, 0xb2,
	0xbb, 0x18, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0xca, 0xf3, 0x18, 0x18, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x12, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x32, 0x8b,
	0x04, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x6c, 0x6c, 0x12, 0x0f, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x11, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x17, 0xca, 0xc1, 0x18, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f,
	0x62, 0x6f, 0x72, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0e, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1a, 0xca, 0xc1, 0x18, 0x16, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2f, 0x74, 0x61, 0x73,
	0x6b, 0x2f, 0x3a, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x0f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x1a, 0x0e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x16, 0xca, 0xc1, 0x18, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6a,
	0x6f, 0x62, 0x6f, 0x72, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x46, 0x0a, 0x07, 0x52, 0x75, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x0f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1a, 0xd2, 0xc1, 0x18, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x3a, 0x69,
	0x64, 0x12, 0x45, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x11, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x1a, 0x0e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x16, 0xd2, 0xc1, 0x18, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f,
	0x62, 0x6f, 0x72, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x47, 0x0a, 0x07, 0x50, 0x75, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x75, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1a, 0xda, 0xc1, 0x18, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x3a, 0x69,
	0x64, 0x12, 0x49, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x0f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x1a, 0x0e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x1a, 0xe2, 0xc1, 0x18, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f,
	0x62, 0x6f, 0x72, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x3a, 0x69, 0x64, 0x42, 0x16, 0x5a, 0x14,
	0x6a, 0x6f, 0x62, 0x6f, 0x72, 0x2f, 0x6b, 0x69, 0x74, 0x65, 0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f,
	0x74, 0x61, 0x73, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_task_proto_rawDescOnce sync.Once
	file_task_proto_rawDescData = file_task_proto_rawDesc
)

func file_task_proto_rawDescGZIP() []byte {
	file_task_proto_rawDescOnce.Do(func() {
		file_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_task_proto_rawDescData)
	})
	return file_task_proto_rawDescData
}

var file_task_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_task_proto_goTypes = []interface{}{
	(*TaskQuery)(nil),       // 0: task.TaskQuery
	(*AuthData)(nil),        // 1: task.AuthData
	(*KvFiled)(nil),         // 2: task.KvFiled
	(*Api)(nil),             // 3: task.Api
	(*TaskData)(nil),        // 4: task.TaskData
	(*Webhooks)(nil),        // 5: task.webhooks
	(*Email)(nil),           // 6: task.email
	(*Webhook)(nil),         // 7: task.webhook
	(*Lark)(nil),            // 8: task.lark
	(*Dingding)(nil),        // 9: task.dingding
	(*Notify)(nil),          // 10: task.Notify
	(*TaskResp)(nil),        // 11: task.TaskResp
	(*TaskAllResp)(nil),     // 12: task.TaskAllResp
	(*TaskGetByIdResp)(nil), // 13: task.TaskGetByIdResp
	(*PostTaskReq)(nil),     // 14: task.PostTaskReq
	(*PutTaskReq)(nil),      // 15: task.PutTaskReq
	nil,                     // 16: task.Api.HeaderEntry
	nil,                     // 17: task.Api.FormsEntry
}
var file_task_proto_depIdxs = []int32{
	1,  // 0: task.Api.auth_data:type_name -> task.AuthData
	2,  // 1: task.Api.header_list:type_name -> task.KvFiled
	2,  // 2: task.Api.form_data_list:type_name -> task.KvFiled
	2,  // 3: task.Api.www_form_list:type_name -> task.KvFiled
	16, // 4: task.Api.header:type_name -> task.Api.HeaderEntry
	17, // 5: task.Api.forms:type_name -> task.Api.FormsEntry
	3,  // 6: task.TaskData.api:type_name -> task.Api
	5,  // 7: task.lark.webhooks:type_name -> task.webhooks
	5,  // 8: task.dingding.webhooks:type_name -> task.webhooks
	6,  // 9: task.Notify.email:type_name -> task.email
	7,  // 10: task.Notify.webhook:type_name -> task.webhook
	8,  // 11: task.Notify.lark:type_name -> task.lark
	9,  // 12: task.Notify.dingding:type_name -> task.dingding
	4,  // 13: task.TaskResp.data:type_name -> task.TaskData
	10, // 14: task.TaskResp.notify:type_name -> task.Notify
	4,  // 15: task.TaskGetByIdResp.data:type_name -> task.TaskData
	10, // 16: task.TaskGetByIdResp.notify:type_name -> task.Notify
	4,  // 17: task.PostTaskReq.data:type_name -> task.TaskData
	10, // 18: task.PostTaskReq.notify:type_name -> task.Notify
	4,  // 19: task.PutTaskReq.data:type_name -> task.TaskData
	10, // 20: task.PutTaskReq.notify:type_name -> task.Notify
	0,  // 21: task.TaskService.GetTaskAll:input_type -> task.TaskQuery
	0,  // 22: task.TaskService.GetTaskById:input_type -> task.TaskQuery
	0,  // 23: task.TaskService.GetTask:input_type -> task.TaskQuery
	0,  // 24: task.TaskService.RunTask:input_type -> task.TaskQuery
	14, // 25: task.TaskService.PostTask:input_type -> task.PostTaskReq
	15, // 26: task.TaskService.PutTask:input_type -> task.PutTaskReq
	0,  // 27: task.TaskService.DeleteTask:input_type -> task.TaskQuery
	12, // 28: task.TaskService.GetTaskAll:output_type -> task.TaskAllResp
	11, // 29: task.TaskService.GetTaskById:output_type -> task.TaskResp
	11, // 30: task.TaskService.GetTask:output_type -> task.TaskResp
	11, // 31: task.TaskService.RunTask:output_type -> task.TaskResp
	11, // 32: task.TaskService.PostTask:output_type -> task.TaskResp
	11, // 33: task.TaskService.PutTask:output_type -> task.TaskResp
	11, // 34: task.TaskService.DeleteTask:output_type -> task.TaskResp
	28, // [28:35] is the sub-list for method output_type
	21, // [21:28] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_task_proto_init() }
func file_task_proto_init() {
	if File_task_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvFiled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Api); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Webhooks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Email); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Webhook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dingding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskAllResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskGetByIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_task_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_task_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_task_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_task_proto_msgTypes[15].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_task_proto_goTypes,
		DependencyIndexes: file_task_proto_depIdxs,
		MessageInfos:      file_task_proto_msgTypes,
	}.Build()
	File_task_proto = out.File
	file_task_proto_rawDesc = nil
	file_task_proto_goTypes = nil
	file_task_proto_depIdxs = nil
}
