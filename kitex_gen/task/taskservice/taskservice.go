// Code generated by Kitex v0.7.0. DO NOT EDIT.

package taskservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	task "jobor/kitex_gen/task"
)

func serviceInfo() *kitex.ServiceInfo {
	return taskServiceServiceInfo
}

var taskServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "TaskService"
	handlerType := (*task.TaskService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetTaskAll":  kitex.NewMethodInfo(getTaskAllHandler, newGetTaskAllArgs, newGetTaskAllResult, false),
		"GetTaskById": kitex.NewMethodInfo(getTaskByIdHandler, newGetTaskByIdArgs, newGetTaskByIdResult, false),
		"GetTask":     kitex.NewMethodInfo(getTaskHandler, newGetTaskArgs, newGetTaskResult, false),
		"RunTask":     kitex.NewMethodInfo(runTaskHandler, newRunTaskArgs, newRunTaskResult, false),
		"PostTask":    kitex.NewMethodInfo(postTaskHandler, newPostTaskArgs, newPostTaskResult, false),
		"PutTask":     kitex.NewMethodInfo(putTaskHandler, newPutTaskArgs, newPutTaskResult, false),
		"DeleteTask":  kitex.NewMethodInfo(deleteTaskHandler, newDeleteTaskArgs, newDeleteTaskResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "task",
		"ServiceFilePath": "",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.7.0",
		Extra:           extra,
	}
	return svcInfo
}

func getTaskAllHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(task.TaskQuery)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(task.TaskService).GetTaskAll(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetTaskAllArgs:
		success, err := handler.(task.TaskService).GetTaskAll(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetTaskAllResult)
		realResult.Success = success
	}
	return nil
}
func newGetTaskAllArgs() interface{} {
	return &GetTaskAllArgs{}
}

func newGetTaskAllResult() interface{} {
	return &GetTaskAllResult{}
}

type GetTaskAllArgs struct {
	Req *task.TaskQuery
}

func (p *GetTaskAllArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetTaskAllArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(task.TaskQuery)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetTaskAllArgs_Req_DEFAULT *task.TaskQuery

func (p *GetTaskAllArgs) GetReq() *task.TaskQuery {
	if !p.IsSetReq() {
		return GetTaskAllArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetTaskAllArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetTaskAllArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetTaskAllResult struct {
	Success *task.TaskAllResp
}

var GetTaskAllResult_Success_DEFAULT *task.TaskAllResp

func (p *GetTaskAllResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetTaskAllResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(task.TaskAllResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetTaskAllResult) GetSuccess() *task.TaskAllResp {
	if !p.IsSetSuccess() {
		return GetTaskAllResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetTaskAllResult) SetSuccess(x interface{}) {
	p.Success = x.(*task.TaskAllResp)
}

func (p *GetTaskAllResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTaskAllResult) GetResult() interface{} {
	return p.Success
}

func getTaskByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(task.TaskQuery)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(task.TaskService).GetTaskById(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetTaskByIdArgs:
		success, err := handler.(task.TaskService).GetTaskById(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetTaskByIdResult)
		realResult.Success = success
	}
	return nil
}
func newGetTaskByIdArgs() interface{} {
	return &GetTaskByIdArgs{}
}

func newGetTaskByIdResult() interface{} {
	return &GetTaskByIdResult{}
}

type GetTaskByIdArgs struct {
	Req *task.TaskQuery
}

func (p *GetTaskByIdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetTaskByIdArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(task.TaskQuery)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetTaskByIdArgs_Req_DEFAULT *task.TaskQuery

func (p *GetTaskByIdArgs) GetReq() *task.TaskQuery {
	if !p.IsSetReq() {
		return GetTaskByIdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetTaskByIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetTaskByIdArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetTaskByIdResult struct {
	Success *task.TaskResp
}

var GetTaskByIdResult_Success_DEFAULT *task.TaskResp

func (p *GetTaskByIdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetTaskByIdResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(task.TaskResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetTaskByIdResult) GetSuccess() *task.TaskResp {
	if !p.IsSetSuccess() {
		return GetTaskByIdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetTaskByIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*task.TaskResp)
}

func (p *GetTaskByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTaskByIdResult) GetResult() interface{} {
	return p.Success
}

func getTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(task.TaskQuery)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(task.TaskService).GetTask(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetTaskArgs:
		success, err := handler.(task.TaskService).GetTask(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetTaskResult)
		realResult.Success = success
	}
	return nil
}
func newGetTaskArgs() interface{} {
	return &GetTaskArgs{}
}

func newGetTaskResult() interface{} {
	return &GetTaskResult{}
}

type GetTaskArgs struct {
	Req *task.TaskQuery
}

func (p *GetTaskArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetTaskArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(task.TaskQuery)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetTaskArgs_Req_DEFAULT *task.TaskQuery

func (p *GetTaskArgs) GetReq() *task.TaskQuery {
	if !p.IsSetReq() {
		return GetTaskArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetTaskArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetTaskArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetTaskResult struct {
	Success *task.TaskResp
}

var GetTaskResult_Success_DEFAULT *task.TaskResp

func (p *GetTaskResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetTaskResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(task.TaskResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetTaskResult) GetSuccess() *task.TaskResp {
	if !p.IsSetSuccess() {
		return GetTaskResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetTaskResult) SetSuccess(x interface{}) {
	p.Success = x.(*task.TaskResp)
}

func (p *GetTaskResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTaskResult) GetResult() interface{} {
	return p.Success
}

func runTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(task.TaskQuery)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(task.TaskService).RunTask(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RunTaskArgs:
		success, err := handler.(task.TaskService).RunTask(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RunTaskResult)
		realResult.Success = success
	}
	return nil
}
func newRunTaskArgs() interface{} {
	return &RunTaskArgs{}
}

func newRunTaskResult() interface{} {
	return &RunTaskResult{}
}

type RunTaskArgs struct {
	Req *task.TaskQuery
}

func (p *RunTaskArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RunTaskArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(task.TaskQuery)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RunTaskArgs_Req_DEFAULT *task.TaskQuery

func (p *RunTaskArgs) GetReq() *task.TaskQuery {
	if !p.IsSetReq() {
		return RunTaskArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RunTaskArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RunTaskArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RunTaskResult struct {
	Success *task.TaskResp
}

var RunTaskResult_Success_DEFAULT *task.TaskResp

func (p *RunTaskResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RunTaskResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(task.TaskResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RunTaskResult) GetSuccess() *task.TaskResp {
	if !p.IsSetSuccess() {
		return RunTaskResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RunTaskResult) SetSuccess(x interface{}) {
	p.Success = x.(*task.TaskResp)
}

func (p *RunTaskResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RunTaskResult) GetResult() interface{} {
	return p.Success
}

func postTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(task.PostTaskReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(task.TaskService).PostTask(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *PostTaskArgs:
		success, err := handler.(task.TaskService).PostTask(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PostTaskResult)
		realResult.Success = success
	}
	return nil
}
func newPostTaskArgs() interface{} {
	return &PostTaskArgs{}
}

func newPostTaskResult() interface{} {
	return &PostTaskResult{}
}

type PostTaskArgs struct {
	Req *task.PostTaskReq
}

func (p *PostTaskArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *PostTaskArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(task.PostTaskReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PostTaskArgs_Req_DEFAULT *task.PostTaskReq

func (p *PostTaskArgs) GetReq() *task.PostTaskReq {
	if !p.IsSetReq() {
		return PostTaskArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PostTaskArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PostTaskArgs) GetFirstArgument() interface{} {
	return p.Req
}

type PostTaskResult struct {
	Success *task.TaskResp
}

var PostTaskResult_Success_DEFAULT *task.TaskResp

func (p *PostTaskResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *PostTaskResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(task.TaskResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PostTaskResult) GetSuccess() *task.TaskResp {
	if !p.IsSetSuccess() {
		return PostTaskResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PostTaskResult) SetSuccess(x interface{}) {
	p.Success = x.(*task.TaskResp)
}

func (p *PostTaskResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PostTaskResult) GetResult() interface{} {
	return p.Success
}

func putTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(task.PutTaskReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(task.TaskService).PutTask(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *PutTaskArgs:
		success, err := handler.(task.TaskService).PutTask(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PutTaskResult)
		realResult.Success = success
	}
	return nil
}
func newPutTaskArgs() interface{} {
	return &PutTaskArgs{}
}

func newPutTaskResult() interface{} {
	return &PutTaskResult{}
}

type PutTaskArgs struct {
	Req *task.PutTaskReq
}

func (p *PutTaskArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *PutTaskArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(task.PutTaskReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PutTaskArgs_Req_DEFAULT *task.PutTaskReq

func (p *PutTaskArgs) GetReq() *task.PutTaskReq {
	if !p.IsSetReq() {
		return PutTaskArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PutTaskArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PutTaskArgs) GetFirstArgument() interface{} {
	return p.Req
}

type PutTaskResult struct {
	Success *task.TaskResp
}

var PutTaskResult_Success_DEFAULT *task.TaskResp

func (p *PutTaskResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *PutTaskResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(task.TaskResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PutTaskResult) GetSuccess() *task.TaskResp {
	if !p.IsSetSuccess() {
		return PutTaskResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PutTaskResult) SetSuccess(x interface{}) {
	p.Success = x.(*task.TaskResp)
}

func (p *PutTaskResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PutTaskResult) GetResult() interface{} {
	return p.Success
}

func deleteTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(task.TaskQuery)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(task.TaskService).DeleteTask(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteTaskArgs:
		success, err := handler.(task.TaskService).DeleteTask(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteTaskResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteTaskArgs() interface{} {
	return &DeleteTaskArgs{}
}

func newDeleteTaskResult() interface{} {
	return &DeleteTaskResult{}
}

type DeleteTaskArgs struct {
	Req *task.TaskQuery
}

func (p *DeleteTaskArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteTaskArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(task.TaskQuery)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteTaskArgs_Req_DEFAULT *task.TaskQuery

func (p *DeleteTaskArgs) GetReq() *task.TaskQuery {
	if !p.IsSetReq() {
		return DeleteTaskArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteTaskArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteTaskArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteTaskResult struct {
	Success *task.TaskResp
}

var DeleteTaskResult_Success_DEFAULT *task.TaskResp

func (p *DeleteTaskResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteTaskResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(task.TaskResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteTaskResult) GetSuccess() *task.TaskResp {
	if !p.IsSetSuccess() {
		return DeleteTaskResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteTaskResult) SetSuccess(x interface{}) {
	p.Success = x.(*task.TaskResp)
}

func (p *DeleteTaskResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteTaskResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetTaskAll(ctx context.Context, Req *task.TaskQuery) (r *task.TaskAllResp, err error) {
	var _args GetTaskAllArgs
	_args.Req = Req
	var _result GetTaskAllResult
	if err = p.c.Call(ctx, "GetTaskAll", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTaskById(ctx context.Context, Req *task.TaskQuery) (r *task.TaskResp, err error) {
	var _args GetTaskByIdArgs
	_args.Req = Req
	var _result GetTaskByIdResult
	if err = p.c.Call(ctx, "GetTaskById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTask(ctx context.Context, Req *task.TaskQuery) (r *task.TaskResp, err error) {
	var _args GetTaskArgs
	_args.Req = Req
	var _result GetTaskResult
	if err = p.c.Call(ctx, "GetTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RunTask(ctx context.Context, Req *task.TaskQuery) (r *task.TaskResp, err error) {
	var _args RunTaskArgs
	_args.Req = Req
	var _result RunTaskResult
	if err = p.c.Call(ctx, "RunTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PostTask(ctx context.Context, Req *task.PostTaskReq) (r *task.TaskResp, err error) {
	var _args PostTaskArgs
	_args.Req = Req
	var _result PostTaskResult
	if err = p.c.Call(ctx, "PostTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PutTask(ctx context.Context, Req *task.PutTaskReq) (r *task.TaskResp, err error) {
	var _args PutTaskArgs
	_args.Req = Req
	var _result PutTaskResult
	if err = p.c.Call(ctx, "PutTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteTask(ctx context.Context, Req *task.TaskQuery) (r *task.TaskResp, err error) {
	var _args DeleteTaskArgs
	_args.Req = Req
	var _result DeleteTaskResult
	if err = p.c.Call(ctx, "DeleteTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
