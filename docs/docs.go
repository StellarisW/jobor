// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "jobor",
            "url": "https://github.com/v-mars/jobor"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/jobor/api": {
            "get": {
                "description": "api get",
                "tags": [
                    "api"
                ],
                "summary": "api get summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "title",
                        "name": "title",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "dom",
                        "name": "dom",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "path",
                        "name": "path",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "method",
                        "name": "method",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "A",
                            "B",
                            "C"
                        ],
                        "type": "string",
                        "description": "string enums",
                        "name": "enumstring",
                        "in": "query"
                    },
                    {
                        "enum": [
                            1,
                            2,
                            3
                        ],
                        "type": "integer",
                        "description": "int enums",
                        "name": "enumint",
                        "in": "query"
                    },
                    {
                        "enum": [
                            1.1,
                            1.2,
                            1.3
                        ],
                        "type": "number",
                        "description": "int enums",
                        "name": "enumnumber",
                        "in": "query"
                    },
                    {
                        "maxLength": 10,
                        "minLength": 5,
                        "type": "string",
                        "description": "string valid",
                        "name": "string",
                        "in": "query"
                    },
                    {
                        "maximum": 10,
                        "minimum": 1,
                        "type": "integer",
                        "description": "int valid",
                        "name": "int",
                        "in": "query"
                    }
                ],
                "responses": {}
            },
            "post": {
                "description": "api post",
                "tags": [
                    "api"
                ],
                "summary": "api post summary",
                "parameters": [
                    {
                        "description": "参数",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/sys_api.ApiPost"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/jobor/api-auto-update": {
            "get": {
                "description": "api trigger update",
                "tags": [
                    "api"
                ],
                "summary": "api trigger update summary",
                "responses": {}
            }
        },
        "/api/v1/jobor/api/{id}": {
            "put": {
                "description": "api put",
                "tags": [
                    "api"
                ],
                "summary": "api put summary",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "int valid",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "参数",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/sys_api.ApiPut"
                        }
                    }
                ],
                "responses": {}
            },
            "delete": {
                "description": "api delete",
                "tags": [
                    "api"
                ],
                "summary": "api delete summary",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "int valid",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "参数",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/sys_api.ApiDel"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/jobor/apis": {
            "get": {
                "description": "api all get",
                "tags": [
                    "api"
                ],
                "summary": "api all get summary",
                "responses": {}
            }
        },
        "/api/v1/jobor/audit-log": {
            "get": {
                "description": "audit log get",
                "tags": [
                    "audit"
                ],
                "summary": "audit log get summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "status success|failed",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "username",
                        "name": "username",
                        "in": "query"
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/jobor/gen-token": {
            "post": {
                "responses": {}
            }
        },
        "/api/v1/jobor/log": {
            "get": {
                "description": "jobor log get",
                "tags": [
                    "jobor log"
                ],
                "summary": "jobor log get summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "pageSize",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/jobor/log/:id/abort": {
            "post": {
                "description": "jobor task abort",
                "tags": [
                    "jobor log"
                ],
                "summary": "jobor task abort summary",
                "responses": {}
            }
        },
        "/api/v1/jobor/log/{id}": {
            "get": {
                "description": "jobor task log get",
                "tags": [
                    "jobor log"
                ],
                "summary": "jobor task log get summary",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "int valid",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/jobor/migrate": {
            "get": {
                "responses": {}
            }
        },
        "/api/v1/jobor/oidc/callback": {
            "get": {
                "description": "oidc callback",
                "tags": [
                    "login"
                ],
                "summary": "oidc callback summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "code",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "state",
                        "name": "state",
                        "in": "query"
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/jobor/oidc/redirect": {
            "get": {
                "description": "oidc redirect login",
                "tags": [
                    "login"
                ],
                "summary": "oidc redirect login summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "next",
                        "name": "next",
                        "in": "query"
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/jobor/role": {
            "get": {
                "description": "role get",
                "tags": [
                    "role"
                ],
                "summary": "role get summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "pageSize",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {}
            },
            "post": {
                "description": "role post",
                "tags": [
                    "role"
                ],
                "summary": "role post summary",
                "parameters": [
                    {
                        "description": "参数",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/role.RolePost"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/jobor/role-tree": {
            "get": {
                "description": "role get tree",
                "tags": [
                    "role"
                ],
                "summary": "role get tree summary",
                "responses": {}
            }
        },
        "/api/v1/jobor/role/{id}": {
            "get": {
                "description": "role get by id",
                "tags": [
                    "role"
                ],
                "summary": "role get by id summary",
                "responses": {}
            },
            "put": {
                "description": "role put",
                "tags": [
                    "role"
                ],
                "summary": "role put summary",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "int valid",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "参数",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/role.RolePut"
                        }
                    }
                ],
                "responses": {}
            },
            "delete": {
                "description": "role delete",
                "tags": [
                    "role"
                ],
                "summary": "role delete summary",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "int valid",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/jobor/roles": {
            "get": {
                "description": "role all get",
                "tags": [
                    "role"
                ],
                "summary": "role all get summary",
                "responses": {}
            }
        },
        "/api/v1/jobor/state-code": {
            "get": {
                "responses": {}
            }
        },
        "/api/v1/jobor/task": {
            "get": {
                "description": "jobor task get",
                "tags": [
                    "jobor task"
                ],
                "summary": "jobor task get summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "pageSize",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {}
            },
            "post": {
                "description": "jobor task post",
                "tags": [
                    "jobor task"
                ],
                "summary": "jobor task post summary",
                "parameters": [
                    {
                        "description": "参数",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/task.PostTaskReq"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/jobor/task/{id}": {
            "get": {
                "description": "jobor task get by id",
                "tags": [
                    "jobor task"
                ],
                "summary": "jobor task get by id summary",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "int valid",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            },
            "put": {
                "description": "jobor task put",
                "tags": [
                    "jobor task"
                ],
                "summary": "jobor task put summary",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "int valid",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "参数",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/task.PutTaskReq"
                        }
                    }
                ],
                "responses": {}
            },
            "delete": {
                "description": "jobor task delete",
                "tags": [
                    "jobor task"
                ],
                "summary": "jobor task delete summary",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "int valid",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/jobor/task/{id}/run": {
            "post": {
                "description": "jobor task run",
                "tags": [
                    "jobor task"
                ],
                "summary": "jobor task run summary",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "int valid",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/jobor/tasks": {
            "get": {
                "description": "jobor task all get",
                "tags": [
                    "jobor task"
                ],
                "summary": "jobor task all get summary",
                "responses": {}
            }
        },
        "/api/v1/jobor/user": {
            "get": {
                "description": "user get",
                "tags": [
                    "user"
                ],
                "summary": "user get summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user_type",
                        "name": "user_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "nickname",
                        "name": "nickname",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "username",
                        "name": "username",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "method",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "pageSize",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {}
            },
            "post": {
                "description": "user post",
                "tags": [
                    "user"
                ],
                "summary": "user post summary",
                "parameters": [
                    {
                        "description": "参数",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.PostUserReq"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/jobor/user-self": {
            "get": {
                "description": "user self get",
                "tags": [
                    "user"
                ],
                "summary": "user self get summary",
                "responses": {}
            }
        },
        "/api/v1/jobor/user-switch/{user_id}": {
            "get": {
                "description": "user switch session",
                "tags": [
                    "user"
                ],
                "summary": "user switch summary",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "switch user_id valid",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/jobor/user-sync": {
            "get": {
                "description": "user sync",
                "tags": [
                    "user"
                ],
                "summary": "user sync summary",
                "responses": {}
            }
        },
        "/api/v1/jobor/user/{id}": {
            "get": {
                "description": "user get by id",
                "tags": [
                    "user"
                ],
                "summary": "user get by id summary",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id valid",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            },
            "put": {
                "description": "user put",
                "tags": [
                    "user"
                ],
                "summary": "user put summary",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "int valid",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "参数",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.PutUserReq"
                        }
                    }
                ],
                "responses": {}
            },
            "delete": {
                "description": "user delete",
                "tags": [
                    "user"
                ],
                "summary": "user delete summary",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "int valid",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "参数",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.UserQuery"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/jobor/users": {
            "get": {
                "description": "user all get",
                "tags": [
                    "user"
                ],
                "summary": "user all get summary",
                "responses": {}
            }
        },
        "/api/v1/jobor/worker": {
            "get": {
                "description": "jobor worker get",
                "tags": [
                    "jobor worker"
                ],
                "summary": "jobor worker get summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "pageSize",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {}
            },
            "post": {
                "description": "jobor worker post",
                "tags": [
                    "jobor worker"
                ],
                "summary": "jobor worker post summary",
                "parameters": [
                    {
                        "description": "参数",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/worker.PostWorkerReq"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/jobor/worker-routing-key": {
            "get": {
                "description": "jobor worker  routing key",
                "tags": [
                    "jobor worker"
                ],
                "summary": "jobor worker routing key summary",
                "responses": {}
            }
        },
        "/api/v1/jobor/worker/{id}": {
            "get": {
                "description": "jobor worker get by id",
                "tags": [
                    "jobor worker"
                ],
                "summary": "jobor worker get by id summary",
                "responses": {}
            },
            "put": {
                "description": "jobor worker put",
                "tags": [
                    "jobor worker"
                ],
                "summary": "jobor worker put summary",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "int valid",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "参数",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/worker.PutWorkerReq"
                        }
                    }
                ],
                "responses": {}
            },
            "delete": {
                "description": "jobor worker delete",
                "tags": [
                    "jobor worker"
                ],
                "summary": "jobor worker delete summary",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "int valid",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/jobor/workers": {
            "get": {
                "description": "jobor worker all get",
                "tags": [
                    "jobor worker"
                ],
                "summary": "jobor worker all get summary",
                "responses": {}
            }
        },
        "/api/v1/login": {
            "post": {
                "description": "user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "login"
                ],
                "summary": "user login summary",
                "parameters": [
                    {
                        "description": "参数",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/mw.LoginReq"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/logout": {
            "post": {
                "description": "user logout",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "login"
                ],
                "summary": "user logout summary",
                "parameters": [
                    {
                        "description": "参数",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/mw.LogoutReq"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/routes": {
            "get": {
                "responses": {}
            }
        }
    },
    "definitions": {
        "google_golang_org_protobuf_types_known_structpb.ListValue": {
            "type": "object",
            "properties": {
                "values": {
                    "description": "Repeated field of dynamically typed values.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/google_golang_org_protobuf_types_known_structpb.Value"
                    }
                }
            }
        },
        "google_golang_org_protobuf_types_known_structpb.Value": {
            "type": "object",
            "properties": {
                "kind": {
                    "description": "The kind of value.\n\nTypes that are assignable to Kind:\n\n\t*Value_NullValue\n\t*Value_NumberValue\n\t*Value_StringValue\n\t*Value_BoolValue\n\t*Value_StructValue\n\t*Value_ListValue"
                }
            }
        },
        "mw.LoginReq": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "mw.LogoutReq": {
            "type": "object",
            "properties": {
                "id_token_hint": {
                    "type": "string"
                },
                "post_logout_redirect_uri": {
                    "type": "string"
                }
            }
        },
        "role.RolePost": {
            "type": "object",
            "properties": {
                "api_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parent_id": {
                    "type": "integer"
                },
                "path": {
                    "description": "string Path = 9[(api.query)=\"path\",(api.body)=\"path\"];",
                    "allOf": [
                        {
                            "$ref": "#/definitions/google_golang_org_protobuf_types_known_structpb.ListValue"
                        }
                    ]
                },
                "sort": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "role.RolePut": {
            "type": "object",
            "properties": {
                "api_ids": {
                    "$ref": "#/definitions/google_golang_org_protobuf_types_known_structpb.ListValue"
                },
                "description": {
                    "type": "string"
                },
                "parent_id": {
                    "description": "repeated int64 ApiIds = 7[(api.query)=\"api_ids,omitempty\",(api.body)=\"api_ids,omitempty\",(api.go_tag)=\"gorm:\\\"-\\\" ignore:\\\"yes\\\"\"];",
                    "type": "integer"
                },
                "path": {
                    "$ref": "#/definitions/google_golang_org_protobuf_types_known_structpb.ListValue"
                },
                "sort": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "sys_api.ApiDel": {
            "type": "object"
        },
        "sys_api.ApiPost": {
            "type": "object",
            "properties": {
                "dom": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "enabled_audit": {
                    "type": "boolean"
                },
                "group": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "sys_api.ApiPut": {
            "type": "object",
            "properties": {
                "dom": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "enabled_audit": {
                    "type": "boolean"
                },
                "group": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "task.Api": {
            "type": "object",
            "properties": {
                "auth_data": {
                    "$ref": "#/definitions/task.AuthData"
                },
                "auth_method": {
                    "type": "string"
                },
                "body": {
                    "type": "string"
                },
                "content_type": {
                    "type": "string"
                },
                "form_data_list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/task.KvFiled"
                    }
                },
                "forms": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "header": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "header_list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/task.KvFiled"
                    }
                },
                "method": {
                    "type": "string"
                },
                "payload": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "www_form_list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/task.KvFiled"
                    }
                }
            }
        },
        "task.AuthData": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "task.Dingding": {
            "type": "object",
            "properties": {
                "enable": {
                    "type": "boolean"
                },
                "webhooks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/task.Webhooks"
                    }
                }
            }
        },
        "task.Email": {
            "type": "object",
            "properties": {
                "enable": {
                    "type": "boolean"
                },
                "receivers": {
                    "description": "多个邮箱地址以逗号分割",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "task.KvFiled": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "task.Lark": {
            "type": "object",
            "properties": {
                "enable": {
                    "type": "boolean"
                },
                "webhooks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/task.Webhooks"
                    }
                }
            }
        },
        "task.Notify": {
            "type": "object",
            "properties": {
                "dingding": {
                    "$ref": "#/definitions/task.Dingding"
                },
                "email": {
                    "$ref": "#/definitions/task.Email"
                },
                "lark": {
                    "$ref": "#/definitions/task.Lark"
                },
                "webhook": {
                    "$ref": "#/definitions/task.Webhook"
                },
                "wechat": {
                    "$ref": "#/definitions/task.WeChat"
                }
            }
        },
        "task.PostTaskReq": {
            "type": "object",
            "properties": {
                "alarm_policy": {
                    "type": "integer"
                },
                "child_run_parallel": {
                    "type": "boolean"
                },
                "child_task_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/task.TaskData"
                },
                "deleted": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "expect_code": {
                    "type": "integer"
                },
                "expect_content": {
                    "type": "string"
                },
                "expr": {
                    "type": "string"
                },
                "lang": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "next": {
                    "type": "string"
                },
                "notify": {
                    "$ref": "#/definitions/task.Notify"
                },
                "owner_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "parent_run_parallel": {
                    "type": "boolean"
                },
                "parent_task_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "prev": {
                    "type": "string"
                },
                "retry": {
                    "type": "integer"
                },
                "route_policy": {
                    "type": "integer"
                },
                "routing_keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "timeout": {
                    "type": "integer"
                },
                "updater": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "task.PutTaskReq": {
            "type": "object",
            "properties": {
                "alarm_policy": {
                    "type": "integer"
                },
                "child_run_parallel": {
                    "type": "boolean"
                },
                "child_task_ids": {
                    "$ref": "#/definitions/google_golang_org_protobuf_types_known_structpb.ListValue"
                },
                "count": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/task.TaskData"
                },
                "deleted": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "expect_code": {
                    "type": "integer"
                },
                "expect_content": {
                    "type": "string"
                },
                "expr": {
                    "type": "string"
                },
                "lang": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "next": {
                    "type": "string"
                },
                "notify": {
                    "$ref": "#/definitions/task.Notify"
                },
                "owner_ids": {
                    "$ref": "#/definitions/google_golang_org_protobuf_types_known_structpb.ListValue"
                },
                "parent_run_parallel": {
                    "type": "boolean"
                },
                "parent_task_ids": {
                    "$ref": "#/definitions/google_golang_org_protobuf_types_known_structpb.ListValue"
                },
                "prev": {
                    "type": "string"
                },
                "retry": {
                    "type": "integer"
                },
                "route_policy": {
                    "type": "integer"
                },
                "routing_keys": {
                    "$ref": "#/definitions/google_golang_org_protobuf_types_known_structpb.ListValue"
                },
                "status": {
                    "type": "string"
                },
                "timeout": {
                    "type": "integer"
                },
                "updater": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "task.TaskData": {
            "type": "object",
            "properties": {
                "api": {
                    "$ref": "#/definitions/task.Api"
                },
                "content": {
                    "type": "string"
                },
                "pre_cmd": {
                    "type": "string"
                }
            }
        },
        "task.WeChat": {
            "type": "object",
            "properties": {
                "enable": {
                    "type": "boolean"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "receivers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "task.Webhook": {
            "type": "object",
            "properties": {
                "enable": {
                    "type": "boolean"
                },
                "urls": {
                    "description": "多个api url以逗号分割",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "task.Webhooks": {
            "type": "object",
            "properties": {
                "secret": {
                    "type": "string"
                },
                "webhook_url": {
                    "type": "string"
                }
            }
        },
        "user.PostUserReq": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "nickname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "role_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "status": {
                    "type": "boolean"
                },
                "user_type": {
                    "type": "string"
                },
                "userid": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "user.PutUserReq": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "nickname": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "role_ids": {
                    "$ref": "#/definitions/google_golang_org_protobuf_types_known_structpb.ListValue"
                },
                "status": {
                    "type": "boolean"
                },
                "updater": {
                    "type": "string"
                },
                "user_type": {
                    "type": "string"
                },
                "userid": {
                    "type": "string"
                }
            }
        },
        "user.UserQuery": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "nickname": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "status": {
                    "type": "boolean"
                },
                "user_type": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "worker.PostWorkerReq": {
            "type": "object",
            "properties": {
                "addr": {
                    "type": "string"
                },
                "auth_mode": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "lease_update": {
                    "type": "integer"
                },
                "mode": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "private": {
                    "type": "string"
                },
                "routing_key": {
                    "type": "string"
                },
                "rsa": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                }
            }
        },
        "worker.PutWorkerReq": {
            "type": "object",
            "properties": {
                "addr": {
                    "type": "string"
                },
                "auth_mode": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "lease_update": {
                    "type": "integer"
                },
                "mode": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "private": {
                    "type": "string"
                },
                "routing_key": {
                    "type": "string"
                },
                "rsa": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "3.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Jobor 定时任务 API",
	Description:      "支持host,server,network等\nAuthorization Bearer token\nheader:  x-enc-data = yes",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
