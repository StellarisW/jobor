// idl/sys/role.proto
syntax = "proto3";

package role;

option go_package = "role";

import "api.proto";
import "google/protobuf/struct.proto";

message RoleAll {
  int64 id = 1[(api.query)="id",(api.body)="id"];
  string name = 2[(api.query)="name",(api.body)="name"];
  string title = 3[(api.query)="title",(api.body)="title"];
}

message RoleQuery {
  string name = 2[(api.query)="name",(api.body)="name"];
  string title = 3[(api.query)="title",(api.body)="title"];
  string client_name = 4[(api.query)="client_name",(api.body)="client_name"];
}

message RolePost {
  string name = 2[(api.query)="name",(api.body)="name,required",(api.vd)="len($)>1"];
  string title = 3[(api.query)="title",(api.body)="title,required"];
  string description = 4[(api.query)="description",(api.body)="description"];
  repeated int64 api_ids = 7[(api.query)="api_ids,omitempty",(api.body)="api_ids,omitempty"];
  int64 parent_id = 8[(api.query)="parent_id",(api.body)="parent_id"];
//  string Path = 9[(api.query)="path",(api.body)="path"];
  google.protobuf.ListValue path = 11[(api.query)="path,omitempty",(api.body)="path,omitempty",(api.go_tag)="gorm:\"-\" ignore:\"yes\""];
  int64 sort = 10[(api.query)="sort",(api.body)="sort"];
}

message RolePut {
  optional string title = 3[(api.query)="title",(api.body)="title,omitempty"];
  optional string description = 4[(api.query)="description",(api.body)="description,omitempty"];
  google.protobuf.ListValue path = 11[(api.query)="path,omitempty",(api.body)="path,omitempty",(api.go_tag)=""];
  google.protobuf.ListValue api_ids = 7[(api.query)="api_ids,omitempty",(api.body)="api_ids,omitempty",(api.go_tag)="gorm:\"-\" ignore:\"yes\""];
//  repeated int64 ApiIds = 7[(api.query)="api_ids,omitempty",(api.body)="api_ids,omitempty",(api.go_tag)="gorm:\"-\" ignore:\"yes\""];
  optional int64 parent_id = 8[(api.query)="parent_id",(api.body)="parent_id,omitempty"];
  optional int64 sort = 10[(api.query)="sort",(api.body)="sort,omitempty"];
  optional string updater = 60[(api.query)="-",(api.body)="-"];
//  repeated Api Apis = 7[(api.query)="apis",(api.body)="apis"];
}

message RoleDel {

}

message RoleResp {

}

service Role {
  rpc GetRoleAll(RoleQuery) returns(RoleResp) {
    option (api.get) = "/api/v1/sys/roles";
  }
  rpc GetRoleTree(RoleQuery) returns(RoleResp) {
    option (api.get) = "/api/v1/sys/role-tree";
  }
  rpc GetRole(RoleQuery) returns(RoleResp) {
    option (api.get) = "/api/v1/sys/role";
  }
  rpc PostRole(RolePost) returns(RoleResp) {
    option (api.post) = "/api/v1/sys/role";
  }
  rpc PutRole(RolePut) returns(RoleResp) {
    option (api.put) = "/api/v1/sys/role/:id";
  }
  rpc DeleteRole(RoleDel) returns(RoleResp) {
    option (api.delete) = "/api/v1/sys/role/:id";
  }
}